- name: 请假明细
  getTemplate: "module.exports = React.createClass({\n  render: function() {\n    var data = this.props.customData;\n    var ths = data.titles.map(function(d,i){\n      return(\n      \t<th>{d}</th>\n      )\n    })\n    var trs = data.content.map(function(d,i){\n      var lis = d.map(function(ele,index){\n        return(\n        \t<td>{ele}</td>\n        )\n      })\n      return(\n      \t<tr>{lis}</tr>\n      )\n    })\n    return (\n      <div className='askleave'>\n        <div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='contentitem'>\n        \t<table>\n            <thead><tr>{ths}</tr></thead>\n            <tbody>{trs}</tbody>\n          </table>\n        </div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = ysp.customHelper.getTableData(elem, ['开始日期', '开始时间', '结束日期',
    '结束时间', '请假时长', '实际请假时长']);

    data.title = '请假明细';

    return data;
  doAction: ''
- name: 审批日志
  getTemplate: "module.exports = React.createClass({\n  render: function() {\n    var data = this.props.customData;\n    var ths = data.titles.map(function(d,i){\n      return(\n      \t<th>{d}</th>\n      )\n    })\n    var trs = data.content.map(function(d,i){\n      var lis = d.map(function(ele,index){\n        return(\n        \t<td>{ele}</td>\n        )\n      })\n      return(\n      \t<tr>{lis}</tr>\n      )\n    })\n    return (\n      <div className='examination'>\n        <div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='contentitem'>\n        \t<table>\n            <thead><tr>{ths}</tr></thead>\n            <tbody>{trs}</tbody>\n          </table>\n        </div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = ysp.customHelper.getTableData(elem, ['环节名称', '人员姓名', '人员公司',
    '人员部门', '人员职位', '审批操作', '审批时间', '意见']);

    data.title = '审批日志';

    return data;
  doAction: ''
- name: 关联流程item
  getTemplate: "module.exports = React.createClass({\n  render: function() {\n    var data = this.props.customData;\n    var lis = data.content.map(function(ele,index){\n      var list = ele.map(function(d,i){\n        if(i==0){\n          return(\n          \t<div className='titlediv'>\n            \t<div>{'0'+(i+1)}</div>\n              <div>{d}</div>\n            </div>\n          )\n        }\n        return(\n        \t<div>\n          \t<div className='contentitem'>{data.titles[i]}</div>\n            <div className='contentitem'>{d}</div>\n          </div>\n        )\n      })\n      return(\n      \t<div className='contentit'>{list}</div>\n      )\n    })\n    return (\n      <div className='relation'>\n        <div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='content'>\n    \t\t\t{lis}    \t\n        </div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    data.title = '关联流程';

    data.titles = [];

    data.content = [];

    var ths =
    elem.querySelector('thead').querySelector('tr').querySelectorAll('th');

    for (var i = 0; i < ths.length; i++) {
      if (i < ths.length - 1) {
        data.titles.push(ths[i].textContent.trim());
      }
    }

    var trs = elem.querySelector('tbody').querySelectorAll('tr');

    for (var i = 0; i < trs.length; i++) {
      var arr = [];
      var tds = trs[i].querySelectorAll('td');

      for (var k = 0; k < data.titles.length; k++) {
        arr.push(tds[k].textContent.trim());
      }

      data.content.push(arr);
    }

    return data;
  doAction: ''
- name: 申请明细合计
  getTemplate: "module.exports = React.createClass({\n  render: function() {\n    var data = this.props.customData;\n    var ths = data.titles.map(function(d,i){\n      return(\n      \t<th>{d}</th>\n      )\n    })\n    var trs = data.content.map(function(d,i){\n      if(i!=data.content.length-1){\n        var tds = d.map(function(ele,index){\n        return(\n        \t<td>{ele}</td>\n        )\n      \t})\n      }\n      return(\n      \t<tr>{tds}</tr>\n      )\n    })\n    var lislength = data.contentlength.map(function(d,i){\n      return(\n      \t<div className='content'>\n        \t<div className='contentitembom'>{d.left}</div>\n          <div className='contentitembom'>{d.right}</div>\n        </div>\n      )\n    })\n    return (\n      <div className='askleave'>\n        <div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='contentitem'>\n        \t<table>\n            <thead><tr>{ths}</tr></thead>\n            <tbody>{trs}</tbody>\n          </table>\n        </div>\n        <div className='tablebottom'>{lislength}</div>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {};
    data.titles = [];
    data.content = [];
    data.contentlength = [];
    var trs = elem.querySelectorAll('tr');
    data.title = trs[0].textContent.trim();
    var ths = elem.querySelectorAll('th');
    for (var i = 0; i < ths.length; i++) {
      data.titles.push(ths[i].textContent.trim());
    }
    for (var i = 2; i < trs.length; i++) {
      var arr = [];

      if (i != trs.length - 1) {
        var tds = trs[i].querySelectorAll('td');

        for (var k = 0; k < tds.length; k++) {
          arr.push(tds[k].textContent.trim());
        }
      }

      if (i == trs.length - 1) {
        data.contentlength.push({
          left: trs[i].querySelector('td').textContent.trim(),
          right: trs[i].querySelector('td').querySelector('input').value
        });
      }

      data.content.push(arr);
    }
    return data;
  doAction: ''
- name: 知会信息
  getTemplate: "module.exports = React.createClass({\n  render: function() {\n    var data = this.props.customData;\n    var lis = data.content.map(function(ele,index){\n      var list = ele.map(function(d,i){\n        return(\n        \t<div>\n          \t<div className='contentitem'>{d.left}</div>\n            <div className='contentitem'>{d.right}</div>\n          </div>\n        )\n      })\n      return(\n      \t<div className='contentit'>{list}</div>\n      )\n    })\n    return (\n      <div className='understanding'>\n        <div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='content'>\n    \t\t\t{lis}    \t\n        </div>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {};
    var trs = elem.querySelectorAll('tr');
    data.title = '知会信息';
    data.content = [];
    for (var i = 0; i < trs.length; i++) {
      var arr = [];
      var tds = trs[i].querySelectorAll('td');

      for (var k = 0; k < tds.length; k++) {
        if (tds[k].querySelector('input')) {
          arr.push({
            left: tds[k].querySelector('label').textContent.trim(),
            right: tds[k].querySelector('input').value
          });
        }
      }

      data.content.push(arr);
    }
    return data;
  doAction: ''
- name: 小记明细
  getTemplate: "module.exports = React.createClass({\n  render: function() {\n    var data = this.props.customData;\n    var ths = data.titles.map(function(d,i){\n      return(\n      \t<th>{d}</th>\n      )\n    })\n    var trs = data.content.map(function(d,i){\n        var tds = d.map(function(ele,index){\n          return(\n            <td>{ele}</td>\n          )\n      \t})\n      return(\n      \t<tr>{tds}</tr>\n      )\n    })\n    var lislength = data.contentlength.map(function(d,i){\n      return(\n      \t<div className='content'>\n        \t<div className='contentitembom'>{d.left}</div>\n          <div className='contentitembom'>{d.right}</div>\n        </div>\n      )\n    })\n    return (\n      <div className='askleave'>\n        <div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='contentitem'>\n        \t<table>\n            <thead><tr>{ths}</tr></thead>\n            <tbody>{trs}</tbody>\n          </table>\n        </div>\n        <div className='tablebottom'>{lislength}</div>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {};
    data.title = '处理明细';
    data.titles = [];
    data.content = [];
    data.contentlength = [];
    var ths = elem.querySelectorAll('th');
    for (var i = 1; i < ths.length; i++) {
      data.titles.push(ths[i].textContent.trim());
    }
    var trs = elem.querySelectorAll('tr');
    for (var i = 2; i < trs.length; i++) {
      var arr = [];

      if (i != trs.length - 1) {
        var tds = trs[i].querySelectorAll('td');

        for (var k = 0; k < tds.length; k++) {
          arr.push(tds[k].textContent.trim());
        }

        data.content.push(arr);
      }

      if (i == trs.length - 1) {
        var sps = trs[i].querySelectorAll('span');
        var ipts = trs[i].querySelectorAll('input');

        for (var k = 0; k < sps.length; k++) {
          data.contentlength.push({
            left: sps[k].textContent.split(':')[0].trim().split('（人民币）')[0],
            right: ipts[k].value
          });
        }
      }
    }
    return data;
  doAction: ''
- name: 详情
  getTemplate: "module.exports = React.createClass({\n  render: function() {\n    var data = this.props.customData;\n    var ths = data.titles.map(function(d,i){\n      return(\n      \t<th>{d}</th>\n      )\n    })\n    var trs = data.content.map(function(d,i){\n      var lis = d.map(function(ele,index){\n        return(\n        \t<td>{ele}</td>\n        )\n      })\n      return(\n      \t<tr>{lis}</tr>\n      )\n    })\n    return (\n      <div className='askleave'>\n        <div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='contentitem'>\n        \t<table>\n            <thead><tr>{ths}</tr></thead>\n            <tbody>{trs}</tbody>\n          </table>\n        </div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = ysp.customHelper.gettable(elem, ['合同方', '名称*', '是否关联人士*', '法人*',
    '地址*', '营业执照代码', '联系人*', '联系方式*']);

    data.title = '签约主体信息';

    return data;
  doAction: ''
- name: 基本信息
  getTemplate: "module.exports = React.createClass({\n  click:function(e){\n    var target = e.target;\n    // debugger;\n    if(target.tagName.toLowerCase() == 'i'){\n      target = target.parentElement.parentElement;\n    }\n    if(target.tagName.toLowerCase() == 'a'){\n      target = target.parentElement;\n    }\n    if(target.previousSibling.className == 'content disnone'){\n      target.previousSibling.className = 'content';\n      target.querySelector('a').className = 'xia';\n    }else{\n      target.previousSibling.className = 'content disnone';\n      target.querySelector('a').className = 'shang';\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    var lis = data.content.map(function(ele,index){\n      if(index<2){\n        var lisele = ele.map(function(d,i){\n          return(\n          \t<div className='contenttit'>\n            \t<div className='contentitem'>{d.left}</div>\n              <div className='contentitem'>{d.right}</div>\n            </div>\n          )\n        })\n        return(\n        \t<div>{lisele}</div>\n        )\n      }\n    })\n    var list = data.content.map(function(ele,index){\n      if(index>1){\n        var lisele = ele.map(function(d,i){\n          if(!d.type){\n            return(\n          \t<div className='contenttit'>\n            \t<div className='contentitem'>{d.left}</div>\n              <div className='contentitem'>{d.right}</div>\n            </div>\n          )\n          }else{\n            if(d.type == 'textarea'){\n              return(\n              \t<div className='contenttit'>\n                \t<div className='contentitem'>{d.left}</div>\n                  <div className='contentitem'><textarea value={d.right}></textarea></div>\n                </div>\n              )\n            }\n          }\n        })\n        return(\n        \t<div>{lisele}</div>\n        )\n      }\n    })\n    return (\n      <div className='information'>\n       \t<div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='content'>\n          {lis}</div>\n        <div className='content disnone'>\n          {list}\n          <div className='contentitem' style={{'border-bottom':'1px solid #e0e0e0','width':'100%','text-align':'right'}}>\n            <a href='javascript:;'>{data.content[2][data.content[2].length-1].text}</a>\n          </div>\n        </div>\n        <span onClick={_this.click}><a className='shang' href='javascript:;'></a>显示更多内容</span>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {}; // var table = elem.querySelectorAll('table')[0];

    var trs = elem.querySelectorAll('tr');

    data.title = '员工信息';

    data.content = [];

    for (var i = 0; i < trs.length; i++) {
      var arr = [];
      var tds = trs[i].querySelectorAll('td');

      for (var k = 0; k < tds.length; k++) {
        if (tds[k].querySelector('input')) {
          arr.push({
            left: tds[k].querySelector('label').textContent.trim(),
            right: tds[k].querySelector('input').value
          });
        }

        if (tds[k].querySelector('select')) {
          var opts = tds[k].querySelector('select').querySelectorAll('option');

          for (var j = 0; j < opts.length; j++) {
            if (opts[j].value == tds[k].querySelector('select').value) {
              arr.push({
                left: tds[k].querySelector('label').textContent.trim(),
                right: opts[j].textContent.trim()
              });
            }
          }
        }

        if (tds[k].querySelector('a')) {
          arr.push({
            href: tds[k].querySelector('a').href,
            text: tds[k].textContent.trim(),
            type: 'a'
          });
        }
      }

      data.content.push(arr);
    } // var table = elem.querySelectorAll('table')[2];

    var tr = elem.querySelectorAll('tr')[elem.querySelectorAll('tr').length -
    2];

    var tds = tr.querySelectorAll('td')[0];

    data.content.push([{
      left: tds.querySelector('label').querySelector('span').previousSibling.previousSibling.previousSibling.textContent.trim(),
      right: tds.querySelector('textarea').value,
      type: 'textarea'
    }]);

    return data;
  doAction: ''
- name: 发起人
  getTemplate: "module.exports = React.createClass({\n  click:function(e){\n    var target = e.target;\n    if(target.parentElement.parentElement.nextElementSibling.className == 'content disnone'){\n      target.className = 'zhankai';\n      target.parentElement.parentElement.nextElementSibling.className = 'content';\n    }else{\n      target.className = 'shouqi';\n      target.parentElement.parentElement.nextElementSibling.className = 'content disnone'\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    var lis = data.content.map(function(ele,index){\n      return(\n      \t<div className='contenttit'>\n        \t<div className='contentitem'>{ele.leftval}</div>\n          <div className='contentitem'>{ele.rightval}</div>\n        </div>\n      )\n    })\n    return (\n      <div className='initiator'>\n        <div className='contenttitle'><span></span><p>{data.title}<i className='shouqi' onClick={_this.click}></i></p></div>\n        <div className='content disnone'>{lis}</div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    data.title = elem.querySelector("div.title").textContent.trim();

    data.content = [];

    var trs =
    elem.querySelector('table').querySelector('tbody').querySelectorAll('tr');

    for (var i = 0; i < trs.length; i++) {
      var tds = trs[i].querySelectorAll('td');

      for (var k = 0; k < tds.length; k++) {
        data.content.push({
          leftval: tds[k].querySelector('label').textContent.trim(),
          rightval: tds[k].querySelector('input').value
        });
      }
    }

    return data;
  doAction: ''
- name: 基本信息item
  getTemplate: "module.exports = React.createClass({\n  click:function(e){\n    var target = e.target;\n    // debugger;\n    if(target.tagName.toLowerCase() == 'i'){\n      target = target.parentElement.parentElement;\n    }\n    if(target.tagName.toLowerCase() == 'a'){\n      target = target.parentElement;\n    }\n    if(target.previousSibling.className == 'content disnone'){\n      target.previousSibling.className = 'content';\n      // target.innerText = '收起更多内容';\n      target.querySelector('a').className = 'xia';\n    }else{\n      target.previousSibling.className = 'content disnone';\n      // target.innerText = '显示更多内容';\n      target.querySelector('a').className = 'shang';\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    var lis = data.content.map(function(ele,index){\n      if(index<2){\n        var lisele = ele.map(function(d,i){\n          return(\n          \t<div className='contenttit'>\n            \t<div className='contentitem'>{d.left}</div>\n              <div className='contentitem'>{d.right}</div>\n            </div>\n          )\n        })\n        return(\n        \t<div>{lisele}</div>\n        )\n      }\n    })\n    var list = data.content.map(function(ele,index){\n      if(index>1){\n        var lisele = ele.map(function(d,i){\n          if(!d.type){\n            return(\n          \t<div className='contenttit'>\n            \t<div className='contentitem'>{d.left}</div>\n              <div className='contentitem'>{d.right}</div>\n            </div>\n          )\n          }else{\n            if(d.type == 'textarea'){\n              return(\n              \t<div className='contenttit'>\n                \t<div className='contentitem'>{d.left}</div>\n                  <div className='contentitem'><textarea value={d.right}></textarea></div>\n                </div>\n              )\n            }\n          }\n        })\n        return(\n        \t<div>{lisele}</div>\n        )\n      }\n    })\n    return (\n      <div className='information'>\n       \t<div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='content'>\n          {lis}</div>\n        <div className='content disnone'>\n          {list}\n          <div className='contentitem' style={{'border-bottom':'1px solid #e0e0e0','width':'100%','text-align':'right'}}>\n            <a href='javascript:;'>{data.content[2][data.content[2].length-1].text}</a>\n          </div>\n        </div>\n        <span onClick={_this.click}><a className='shang' href='javascript:;'></a>显示更多内容</span>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {};
    var table = elem.querySelectorAll('table')[0];
    var trs = table.querySelectorAll('tr');
    data.title = '基本信息';
    data.content = [];
    for (var i = 0; i < trs.length; i++) {
      var arr = [];
      var tds = trs[i].querySelectorAll('td');

      for (var k = 0; k < tds.length; k++) {
        if (tds[k].querySelector('input')) {
          if (tds[k].querySelector('input').type == 'radio') {
            arr.push({
              left: tds[k].querySelector('label').textContent.trim(),
              right: tds[k].querySelector('input').checked ? tds[k].querySelector('input').parentElement.nextSibling.textContent.trim() : tds[k].querySelector('input').parentElement.nextSibling.textContent.trim()
            });
          } else {
            arr.push({
              left: tds[k].querySelector('label').textContent.trim(),
              right: tds[k].querySelector('input').value
            });
          }
        }

        if (tds[k].querySelector('select')) {
          var opts = tds[k].querySelector('select').querySelectorAll('option');

          for (var j = 0; j < opts.length; j++) {
            if (opts[j].value == tds[k].querySelector('select').value) {
              arr.push({
                left: tds[k].querySelector('label').textContent.trim(),
                right: opts[j].textContent.trim()
              });
            }
          }
        }

        if (tds[k].querySelector('a')) {
          arr.push({
            href: tds[k].querySelector('a').href,
            text: tds[k].textContent.trim(),
            type: 'a'
          });
        }
      }

      data.content.push(arr);
    }
    var table = elem.querySelectorAll('table')[2];
    var tr = table.querySelectorAll('tr')[0];
    var tds = tr.querySelectorAll('td')[0];
    data.content.push([{
      left: tds.querySelector('label').querySelector('span').previousSibling.previousSibling.previousSibling.textContent.trim(),
      right: tds.querySelector('textarea').value,
      type: 'textarea'
    }]);
    return data;
  doAction: ''
- name: header
  getTemplate: "import { Header, HeaderLeft } from 'ysp-interior-components';\nimport { back } from 'appRenderer';\nmodule.exports = React.createClass({\n  render: function() {\n    var data = this.props.customData;\n    return (\n      <div className='titleH1'>\n          <Header title={data.title}>\n    \t\t\t\t<HeaderLeft>\n      \t\t\t\t<span></span><button onClick={back}>返回</button>\n    \t\t\t\t</HeaderLeft>\n  \t\t\t\t</Header>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {};
    var span = elem.querySelector('span');
    data.title = span.nextSibling.nextSibling.textContent.trim();
    return data;
  doAction: ''
- name: Enclosure
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target,\n        type = '',\n        data = '';\n    if(target.tagName.toLowerCase() == 'button'){\n      console.log(target.id);\n      if(target.id == 'uploadDiv' ){\n        type = 'commit';\n        data = 'btnFileUpload';\n      }else{\n        type = 'add';\n        data = 'btnFileUpload';\n      }\n    }\n    if(target.tagName.toLowerCase() == 'p'){\n      type = 'updel';\n      data = {\n        index:target.getAttribute('data-index'),\n        i:target.className=='xiazai'?0:1\n      }\n    }\n    if(handler){\n      handler({\n        eventType:type,\n        data:data\n      })\n    }\n  },\n  click:function(e){\n    var target = e.target;\n    if(target.className == 'shang'){\n      target.className = 'xia';\n      var divs = target.parentElement.parentElement.querySelectorAll('div.displnone');\n      for(var i=0;i<divs.length;i++){\n        divs[i].className = 'displblock';\n      }\n    }else{\n      target.className = 'shang';\n      var divs = target.parentElement.parentElement.querySelectorAll('div.displblock');\n      for(var i=0;i<divs.length;i++){\n        divs[i].className = 'displnone';\n      }\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    var lis = data.content.map(function(ele,index){\n      var list = ele.map(function(d,i){\n        if(i==0){\n          return(\n          \t<div className='titlediv'>\n            \t<div>{'0'+(index+1)}</div>\n              <div>{d}</div>\n              <div onClick={_this.click} className='shang'></div>\n            </div>\n          )\n        }\n        if(i == ele.length-1){\n          if(d.length>2){\n              return(\n              <div className='displnone'>\n                <div className='contentitem contentspan' style={{'width':'100%','text-align-last':'auto','text-align':'center'}}><p className='shanchu' data-index={index} onClick={_this.onClick.bind(_this)}><span></span>{d[2]+d[3]}</p><p data-index={index} className='xiazai' onClick={_this.onClick.bind(_this)}><span></span>{d.length>2?d[0]+d[1]:''}</p></div>\n              </div>\n            )\n          }else{\n             return(\n              <div className='displnone'>\n                <div className='contentitem'><p className='xiazai' data-index={index} onClick={_this.onClick.bind(_this)}><span></span>{d[0]+d[1]}</p></div>\n              </div>\n            )\n          }\n        }\n        return(\n        \t<div className='displnone'>\n          \t<div className='contentitem'>{data.titles[i]}</div>\n            <div className='contentitem'>{d}</div>\n          </div>\n        )\n      })\n      return(\n      \t<div className='contentit'>{list}</div>\n      )\n    })\n    \n    return (\n      <div className='Enclosure'>\n        <div className='contenttitle'>\n          <span className='xia'></span>\n          <p>{data.title}\n            <div>\n              <button onClick={_this.onClick.bind(_this)}>选择文件</button>\n              <button id={data.id} onClick={_this.onClick.bind(_this)}>上传文件</button>\n            </div>\n          </p>\n        </div>\n        <div className='content'>\n    \t\t\t{lis}\n        </div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = ysp.customHelper.getTabledata(elem, ['文件名', '上传人', '上传时间', '版本',
    '操作']);

    data.id = elem.nextElementSibling.nextElementSibling.id;

    data.title = '附件';

    return data;
  doAction: |
    var type = data.eventType;
    var data = data.customData;
    if (type == 'commit') {
      // debugger;
      elem.ownerDocument.querySelector("#" + data).click();
      setTimeout(function () {
        elem.ownerDocument.defaultView.InitAttachmentList();
      }, 1000); // setTimeout(function () {
      //   var url = ysp.appMain.getActiveUrl();
      //   ysp.appMain.reloadPage(url);
      // }, 2000);
    }
    if (type == 'add') {
      elem.ownerDocument.querySelector("#" + data).previousElementSibling.querySelector('input').click();
    }
    if (type == 'updel') {
      var tds = elem.querySelectorAll('tbody')[1].querySelectorAll('tr')[data.index].querySelectorAll('td');
      tds[tds.length - 1].querySelectorAll('a')[data.i].click();
    }
- name: 员工信息-ltt
  getTemplate: "module.exports = React.createClass({\n  click:function(e){\n    var target = e.target;\n    // debugger;\n    if(target.tagName.toLowerCase() == 'i'){\n      target = target.parentElement.parentElement;\n    }\n    if(target.tagName.toLowerCase() == 'a'){\n      target = target.parentElement;\n    }\n    if(target.previousSibling.className == 'content disnone'){\n      target.previousSibling.className = 'content';\n      target.querySelector('a').className = 'xia';\n    }else{\n      target.previousSibling.className = 'content disnone';\n      target.querySelector('a').className = 'shang';\n    }\n  },\n  onclickRadio:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'clickRadio',\n        data:[target.dataset.checked,target.dataset.index]\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    var lis = data.content.map(function(ele,index){\n      if(index<2){\n        var lisele = ele.map(function(d,i){\n          return(\n          \t<div className='contenttit'>\n            \t<div className='contentitem'>{d.left}</div>\n              <div className='contentitem'>{d.right}</div>\n            </div>\n          )\n        })\n        return(\n        \t<div>{lisele}</div>\n        )\n      }\n    })\n    var list = data.content.map(function(ele,index){\n      if(index>1){\n        var lisele = ele.map(function(d,i){\n          if(!d.type){\n            return(\n          \t<div className='contenttit'>\n            \t<div className='contentitem'>{d.left}</div>\n              <div className='contentitem'>{d.right}</div>\n            </div>\n          )\n          }else{\n            if(d.type == 'textarea'){\n              return(\n              \t<div className='contenttit'>\n                \t<div className='contentitem'>{d.left}</div>\n                  <div className='contentitem'><textarea value={d.right}></textarea></div>\n                </div>\n              )\n            }else if(d.type == 'radio'){\n              return(\n              \t<div className='contenttit'>\n                \t<div className='contentitem'>{d.left}</div>\n                  <div className='contentitem ysp-radioBtn-tt'>\n                  \t\t<span className={d.right[0]==true?\"ysp-RadiusSelected-tt\":\"ysp-RadiusUnselected-tt\"} data-checked={d.right[0]} data-index={0} onClick={_this.onclickRadio.bind(_this)}>是</span>\n                    \t<span className={d.right[1]==true?\"ysp-RadiusSelected-tt\":\"ysp-RadiusUnselected-tt\"} data-checked={d.right[1]} data-index={1} onClick={_this.onclickRadio.bind(_this)}>否</span>\n                  </div>\n                </div>\n              )\n            }\n          }\n        })\n        return(\n        \t<div>{lisele}</div>\n        )\n      }\n    })\n    return (\n      <div className='information'>\n       \t<div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='content'>\n          {lis}</div>\n        <div className='content disnone'>\n          {list}\n          <div className='contentitem' style={{'border-bottom':'1px solid #e0e0e0','width':'100%','text-align':'right'}}>\n            <a href='javascript:;'>{data.content[2][data.content[2].length-1].text}</a>\n          </div>\n        </div>\n        <span onClick={_this.click}><a className='shang' href='javascript:;'></a>显示更多内容</span>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {}; // var table = elem.querySelectorAll('table')[0];
    var trs = elem.querySelectorAll('tr');
    data.title = '员工信息';
    data.content = [];
    for (var i = 0; i < trs.length; i++) {
      var arr = [];
      var tds = trs[i].querySelectorAll('td');

      for (var k = 0; k < tds.length; k++) {
        if (tds[k].querySelector("input[type='text']")) {
          arr.push({
            left: tds[k].querySelector('label').textContent.trim(),
            right: tds[k].querySelector('input').value
          });
        }

        if (tds[k].querySelector('textarea')) {
          arr.push({
            left: tds[k].querySelector('label').textContent.replace(/\s+/g, ''),
            right: tds[k].querySelector('textarea').value,
            type: 'textarea'
          });
        }

        if (tds[k].querySelector("input[type='radio']")) {
          arr.push({
            left: tds[k].querySelector('label').textContent.replace(/\s+/g, ''),
            right: [tds[k].querySelectorAll("input[type='radio']")[0].checked, tds[k].querySelectorAll("input[type='radio']")[1].checked],
            type: 'radio'
          });
        }
      }

      data.content.push(arr);
    }
    return data;
  doAction: |
    if (data.eventType == 'clickRadio') {
      var check = data.dataCustom[0];
      var index = data.dataCustom[1];
      var target = elem.querySelectorAll("input[type='radio']")[index];
      target.checked = check;
    }
- name: 岗位信息（input有可以输入的情况）
  getTemplate: "module.exports = React.createClass({\n  click:function(e){\n    var target = e.target;\n    // debugger;\n    if(target.tagName.toLowerCase() == 'i'){\n      target = target.parentElement.parentElement;\n    }\n    if(target.tagName.toLowerCase() == 'a'){\n      target = target.parentElement;\n    }\n    if(target.previousSibling.className == 'content disnone'){\n      target.previousSibling.className = 'content';\n      target.querySelector('a').className = 'xia';\n    }else{\n      target.previousSibling.className = 'content disnone';\n      target.querySelector('a').className = 'shang';\n    }\n  },\n  onblur:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'blur',\n        data:[target.dataset.index,target.value]\n      })\n    }\n  },\n  onclickRadio:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'clickRadio',\n        data:[target.dataset.checked,target.dataset.index]\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    var lis = data.content.map(function(ele,index){\n      if(index<2){\n        var lisele = ele.map(function(d,i){\n          return(\n          \t<div className='contenttit'>\n            \t<div className='contentitem'>{d.left}</div>\n              <div className='contentitem'> <AInput value={d.right} readOnly={d.readyState}/></div>\n            </div>\n          )\n        })\n        return(\n        \t<div>{lisele}</div>\n        )\n      }\n    })\n    var list = data.content.map(function(ele,index){\n      if(index>1){\n        var lisele = ele.map(function(d,i){\n          if(!d.type){\n            return(\n          \t<div className='contenttit'>\n            \t<div className='contentitem'>{d.left}</div>\n              <div className='contentitem'>\n                \n                {d.readyState==true?<AInput value={d.right} readOnly={d.readyState}/>:<AInput value={d.right} readOnly={d.readyState} onBlur={_this.onblur.bind(_this)} data-index={index}/>}\n                \n              </div>\n            </div>\n          )\n          }else{\n            if(d.type == 'textarea'){\n              return(\n              \t<div className='contenttit'>\n                \t<div className='contentitem'>{d.left}</div>\n                  <div className='contentitem'><textarea value={d.right}></textarea></div>\n                </div>\n              )\n            }else if(d.type == 'radio'){\n              return(\n              \t<div className='contenttit'>\n                \t<div className='contentitem'>{d.left}</div>\n                  <div className='contentitem ysp-radioBtn-tt'>\n                  \t\t<span className={d.right[0]==true?\"ysp-RadiusSelected-tt\":\"ysp-RadiusUnselected-tt\"} data-checked={d.right[0]} data-index={0} onClick={_this.onclickRadio.bind(_this)}>是</span>\n                    \t<span className={d.right[1]==true?\"ysp-RadiusSelected-tt\":\"ysp-RadiusUnselected-tt\"} data-checked={d.right[1]} data-index={1} onClick={_this.onclickRadio.bind(_this)}>否</span>\n                  </div>\n                </div>\n              )\n            }\n          }\n        })\n        return(\n        \t<div>{lisele}</div>\n        )\n      }\n    })\n    return (\n      <div className='information'>\n       \t<div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='content'>\n          {lis}</div>\n        <div className='content disnone'>\n          {list}\n          <div className='contentitem' style={{'border-bottom':'1px solid #e0e0e0','width':'100%','text-align':'right'}}>\n            <a href='javascript:;'>{data.content[2][data.content[2].length-1].text}</a>\n          </div>\n        </div>\n        <span onClick={_this.click}><a className='shang' href='javascript:;'></a>显示更多内容</span>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {}; // var table = elem.querySelectorAll('table')[0];
    var trs = elem.querySelectorAll('tr');
    data.title = '岗位信息';
    data.content = [];
    for (var i = 0; i < trs.length; i++) {
      var arr = [];
      var tds = trs[i].querySelectorAll('td');

      for (var k = 0; k < tds.length; k++) {
        if (tds[k].querySelector("input[type='text']")) {
          arr.push({
            left: tds[k].querySelector('label').textContent.trim(),
            right: tds[k].querySelector('input').value,
            readyState: tds[k].querySelector('input').readOnly
          });
        }

        if (tds[k].querySelector('textarea')) {
          arr.push({
            left: tds[k].querySelector('label').textContent.replace(/\s+/g, ''),
            right: tds[k].querySelector('textarea').value,
            type: 'textarea'
          });
        }

        if (tds[k].querySelector("input[type='radio']")) {
          arr.push({
            left: tds[k].querySelector('label').textContent.replace(/\s+/g, ''),
            right: [tds[k].querySelectorAll("input[type='radio']")[0].checked, tds[k].querySelectorAll("input[type='radio']")[1].checked],
            type: 'radio'
          });
        }
      }

      data.content.push(arr);
    }
    return data;
  doAction: |
    if (data.eventType == 'clickRadio') {
      var check = data.dataCustom[0];
      var index = data.dataCustom[1];
      var target = elem.querySelectorAll("input[type='radio']")[index];
      target.checked = check;
    } else if (data.eventType == 'blur') {
      var index = parseInt(data.dataCustom[0]);
      var val = data.dataCustom[1];
      var target = elem.querySelectorAll('tr')[index].querySelectorAll("input");

      for (var i = 0; i < target.length; i++) {
        if (target[i].readOnly == false) {
          target[i].value = val;
        }
      }
    }
- name: lttTable
  getTemplate: "module.exports = React.createClass({\n  \n  onblur:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'blur',\n        data:[target.dataset.index,target.value]\n      })\n    }\n  },\n \n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n \n    var list = data.content.map(function(ele,index){\n     \n        var lisele = ele.map(function(d,i){\n         if(d.type == 'textarea'){\n              return(\n              \t<div className='contenttit'>\n                \t<div className='contentitem'>{d.left}</div>\n                  <div className='contentitem'><textarea value={d.right} readOnly={d.readyState}></textarea></div>\n                </div>\n              )\n            }else {\n            return(\n                  <div className='contenttit'>\n                    <div className='contentitem'>{d.left}</div>\n                    <div className='contentitem'>\n\n                      {d.readyState==true?<AInput value={d.right} readOnly={d.readyState}/>:<AInput value={d.right} readOnly={d.readyState} onBlur={_this.onblur.bind(_this)} data-index={index}/>}\n\n                    </div>\n                  </div>\n              )\n            }\n        })\n        return(\n        \t<div>{lisele}</div>\n        )\n      \n    })\n    return (\n      <div className='information'>\n       \t<div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='content'>\n          {list}</div>\n        \n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {}; // var table = elem.querySelectorAll('table')[0];
    var trs = elem.querySelectorAll('tr');
    data.title = '岗位信息';
    data.content = [];
    for (var i = 0; i < trs.length; i++) {
      var arr = [];
      var tds = trs[i].querySelectorAll('td');

      for (var k = 0; k < tds.length; k++) {
        if (tds[k].querySelector("input[type='text']")) {
          arr.push({
            left: tds[k].querySelector('label').textContent.trim(),
            right: tds[k].querySelector('input').value,
            readyState: tds[k].querySelector('input').readOnly
          });
        }

        if (tds[k].querySelector('textarea')) {
          arr.push({
            left: tds[k].querySelector('label').textContent.replace(/\s+/g, ''),
            right: tds[k].querySelector('textarea').value,
            readyState: tds[k].querySelector('textarea').readOnly,
            type: 'textarea'
          });
        }

        if (tds[k].querySelector("input[type='radio']")) {
          arr.push({
            left: tds[k].querySelector('label').textContent.replace(/\s+/g, ''),
            right: [tds[k].querySelectorAll("input[type='radio']")[0].checked, tds[k].querySelectorAll("input[type='radio']")[1].checked],
            type: 'radio'
          });
        }
      }

      data.content.push(arr);
    }
    return data;
  doAction: |
    if (data.eventType == 'blur') {
      var index = parseInt(data.dataCustom[0]);
      var val = data.dataCustom[1];
      var target = elem.querySelectorAll('tr')[index].querySelectorAll("input");

      for (var i = 0; i < target.length; i++) {
        if (target[i].readOnly == false) {
          target[i].value = val;
        }
      }
    }
- name: close关闭按钮
  getTemplate: |-
    module.exports = React.createClass({
      onclickClose:function(e){
        var target=e.target;
        var handler=this.props.customHandler;
        if(handler){
          handler({
            eventType:'close'
          })
        }
      },
      render: function() {
        return (
          <div className='ysp-closeBtn-tt'>
            <button onClick={this.onclickClose.bind(this)}>{this.props.customData}</button>
          </div>
        )
      }
    });
  getData: |
    if (!elem) {
      return;
    }
    return elem.textContent;
  doAction: |
    if (data.eventType == 'close') {
      elem.click();
    }
- name: lutiantianChaxun
  getTemplate: "module.exports = React.createClass({\n  onclickBtn:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'clickBtn'\n      })\n    }\n  },\n  onblurDate:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'blurDate',\n        data:[target.getAttribute('id'),target.value]\n      })\n    }\n  },\n  render: function() {\n    var data=this.props.customData;\n    var _this=this;\n    var lists=data.content.map(function(d,i){\n      var list=d.map(function(dd,ii){\n        if(dd.type=='button'){\n          return(\n          \t<button onClick={_this.onclickBtn.bind(_this)}>{dd.left}</button>\n          )\n        }else{\n          return(\n        \t\t<div>\n            \t<span>{dd.left}</span>\n              <AInput type='date' id={dd.id[0]} value={dd.right[0]} onBlur={_this.onblurDate.bind(_this)}/>\n              <AInput type='date' id={dd.id[1]} value={dd.right[1]} onBlur={_this.onblurDate.bind(_this)}/>\n              <span>—></span>\n            </div>\n        \t)\n        }\n        \n      })\n      return(\n      \t\t<div className='ysp-checkDateContent-tt'>{list}</div>\n      )\n    })\n    return (\n      <div className='ysp-checkDate-tt'>\n       {lists}\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {
      content: []
    };
    var trs = elem.querySelectorAll('tr');
    for (var i = 0; i < trs.length; i++) {
      var arr = [];
      var tds = trs[i].querySelectorAll('td');

      for (var j = 0; j < tds.length; j++) {
        if (tds[j].querySelector('button')) {
          arr.push({
            left: tds[j].querySelector('button').textContent.trim(),
            type: 'button'
          });
        } else {
          arr.push({
            left: tds[j].querySelector('label').textContent.trim(),
            right: [tds[j].querySelectorAll('input')[0].value, tds[j].querySelectorAll('input')[1].value],
            id: [tds[j].querySelectorAll('input')[0].getAttribute('id'), tds[j].querySelectorAll('input')[1].getAttribute('id')]
          });
        }
      }

      data.content.push(arr);
    }
    return data;
  doAction: |
    if (data.eventType == 'clickBtn') {
      var target = elem.querySelector('button');
      target.click();
    } else if (data.eventType == 'blurDate') {
      var id = data.dataCustom[0];
      var val = data.dataCustom[1];
      var target = elem.querySelector("#" + id);
      target.value = val;
    }
- name: 报销总明细下面的合计（table）
  getTemplate: "module.exports = React.createClass({\n  \n  onblur:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'blur',\n        data:[target.dataset.index,target.value]\n      })\n    }\n  },\n \n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n \n    var list = data.content.map(function(ele,index){\n     \n        var lisele = ele.map(function(d,i){\n        \n              return(\n                <div className='ysp-baoxiaoTotal-tt'>\n                \t\t\t <div className='ysp-baoxiaoList-tt'>\n                          <div className='ysp-baoxiaoListTitle-tt'>{d.left.replace(/\\s+/g,'').split(':')[0]}</div>\n                          <div className='yspbaoxiaoListContent-tt'>\n\n                            {d.readyState==true?<AInput value={d.right[0]} readOnly={d.readyState[0]}/>:<AInput value={d.right[0]} readOnly={d.readyState[0]} onBlur={_this.onblur.bind(_this)} data-index={index}/>}\n\n                          </div>\n                   </div>\n                  <div className='ysp-baoxiaoList-tt'>\n                  \t\t<div className='ysp-baoxiaoListTitle-tt'>{d.left.replace(/\\s+/g,'').split(':')[1]}</div>\n                      <div className='yspbaoxiaoListContent-tt'>\n\n                        {d.readyState==true?<AInput value={d.right[1]} readOnly={d.readyState[1]}/>:<AInput value={d.right[1]} readOnly={d.readyState[1]} onBlur={_this.onblur.bind(_this)} data-index={index}/>}\n\n                      </div>\n                  </div>\n                  \n                </div>\n                   \n                   \n                )\n            \n        })\n        return(\n        \t<div>{lisele}</div>\n        )\n      \n    })\n    return (\n      <div className='information'>\n       \n        <div className='content'>\n          {list}</div>\n        \n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {}; // var table = elem.querySelectorAll('table')[0];
    var trs = elem.querySelectorAll('tr');
    data.content = [];
    for (var i = 0; i < trs.length; i++) {
      var arr = [];
      var tds = trs[i].querySelectorAll('td');

      for (var k = 0; k < tds.length; k++) {
        if (tds[k].querySelector("input[type='text']")) {
          arr.push({
            left: tds[k].textContent.replace(/\s+/g, ''),
            right: [tds[k].querySelectorAll('input')[0].value, tds[k].querySelectorAll('input')[1].value],
            readyState: [tds[k].querySelectorAll('input')[0].readOnly, tds[k].querySelectorAll('input')[1].readOnly]
          });
        }

        if (tds[k].querySelector('textarea')) {
          arr.push({
            left: tds[k].querySelector('label').textContent.replace(/\s+/g, ''),
            right: tds[k].querySelector('textarea').value,
            readyState: tds[k].querySelector('textarea').readOnly,
            type: 'textarea'
          });
        }

        if (tds[k].querySelector("input[type='radio']")) {
          arr.push({
            left: tds[k].querySelector('label').textContent.replace(/\s+/g, ''),
            right: [tds[k].querySelectorAll("input[type='radio']")[0].checked, tds[k].querySelectorAll("input[type='radio']")[1].checked],
            type: 'radio'
          });
        }
      }

      data.content.push(arr);
    }
    return data;
  doAction: |
    if (data.eventType == 'blur') {
      var index = parseInt(data.dataCustom[0]);
      var val = data.dataCustom[1];
      var target = elem.querySelectorAll('tr')[index].querySelectorAll("input");

      for (var i = 0; i < target.length; i++) {
        if (target[i].readOnly == false) {
          target[i].value = val;
        }
      }
    }
- name: 已办查询
  getTemplate: "module.exports = React.createClass({\n  onchange:function(e){\n    //debugger;\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'onchange',\n        data:[target.getAttribute('name'),target.selectedIndex]\n      })\n    }\n  },\n  onclickDate:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'onclickDate',\n        data:[target.getAttribute('name'),target.value]\n      })\n    }\n  },\n  onblur:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'onblur',\n        data:[target.getAttribute('name'),target.value]\n      })\n    }\n  },\n  onclickRadius:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    var ind=target.dataset.index;\n    var sel=target.dataset.checked;\n    if(handler){\n      handler({\n        eventType:'onclickRadius',\n        data:[ind,sel]\n      })\n    }\n  },\n  onclickBtn:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    \n    if(handler){\n      handler({\n        eventType:'onclickBtn',\n        \n      })\n    }\n  },\n  render: function() {\n    var data=this.props.customData;\n    var _this=this;\n   //console.log(data.content[0]);\n    var list0=data.content[0].sel.opt.map(function(d,i){ \n        var opts=d.map(function(opt,optId){\n          if(optId>0){\n            return(\n                <option selected={d[0]==opt? true:false}>{opt}</option>\n            )\n          }\n            \n          \n          \n        })\n        return(              \n            <select name={data.content[0].sel.optType[i]} onChange={_this.onchange.bind(_this)}>{opts}</select>           \n        )\n    })\n    var lis1=data.content[1].sel.opt.map(function(d,i){ \n        var opts=d.map(function(opt,optId){\n          if(optId>0){\n            return(\n                <option>{opt}</option>\n            )\n          }\n        })\n        return(              \n            <select name={data.content[1].sel.optType[i]} onChange={_this.onchange.bind(_this)}>{opts}</select>           \n        )\n    })\n    return (\n      <div className='ysp-selectBar-tt'>\n        <div className='ysp-selectBar-title-tt'>{data.title}</div>\n        <div className='ysp-selectBar-content-tt'>\n          \t<div>\n          \t\t\t\t<p>{data.content[0].leftTitle[0]}</p>\n        \t\t\t\t\t{list0}\n              \t\t<p>—></p>\n          \t</div>\n          \t<div>\n          \t\t\t\t<p>{data.content[0].leftTitle[1]}</p>\n                  <AInput type='date' name={data.content[0].iptType[0]} value={data.content[0].iptVal[0]} onBlur={_this.onclickDate.bind(_this)}/>\n                  \n                  <AInput type='date' name={data.content[0].iptType[1]} value={data.content[0].iptVal[1]} onBlur={_this.onclickDate.bind(_this)}/>\n              \t\t<p>至</p>\n          \t</div>\n          \t<div>\n          \t\t\t<p>{data.content[0].leftTitle[2]}</p>\n          \t\t\t<AInput type='text' name={data.content[0].iptType[2]} value={data.content[0].iptVal[2]} onBlur={_this.onblur.bind(_this)}/>\n          \t</div>\n          \t\n        </div>\n     \t\t<div className='ysp-selectBar-content-tt'>\n        \t\t<div>\n          \t\t\t<p>{data.content[1].leftTitle[0]}</p>\n          \t\t\t<AInput type='text' name={data.content[1].iptType[0]} value={data.content[1].iptVal[0]} onBlur={_this.onblur.bind(_this)}/>\n          \t</div>\n          \t<div>\n            \t\t<p>{data.content[1].leftTitle[1]}</p>\n              \t<p className='ysp-radius-btn-tt'>\n              \t\t\t<span data-index='0' onClick={_this.onclickRadius.bind(_this)} data-checked={data.content[1].iptVal[2]} className={data.content[1].iptVal[2]==true?\"ysp-RadiusSelected-tt\":\"ysp-RadiusUnselected-tt\"}>流程类别模式</span>\n                <span data-index='1' onClick={_this.onclickRadius.bind(_this)} data-checked={data.content[1].iptVal[1]} className={data.content[1].iptVal[1]==true?\"ysp-RadiusSelected-tt\":\"ysp-RadiusUnselected-tt\"}>时间模式</span>\n              \t</p>\n                \n            </div>\n          \t<div>\n          \t\t\t<p>{data.content[1].leftTitle[2]}</p>\n          \t\t\t{lis1}          \t\n          \t</div>\n          \t\n          \t\n        </div>\n        <div className='ysp-selectBar-content-tt'>\n        \t<div>\n          \t<p>{data.content[2].leftTitle[0]}</p>\n          \t<AInput type='text' name={data.content[2].iptType[0]} value={data.content[2].iptVal[0]} onBlur={_this.onblur.bind(_this)}/>\n          </div>\n        </div>\n        <div className='ysp-selectBarBtn-tt'>\n        \t<button onClick={_this.onclickBtn.bind(_this)}>{data.content[3].btn}</button>\n        </div>\n      </div>\n    )\n  }\n});"
  getData: "if (!elem) {\n  return;\n}\nvar data = {\n  content: []\n};\ndata.title = '查询条件';\nvar trs = elem.querySelectorAll('tr'); //循环每个tr\nfor (var i = 0; i < trs.length; i++) {\n  var trArr = {\n    leftTitle: [],\n    sel: {\n      optType: [],\n      opt: []\n    },\n    iptVal: [],\n    iptType: []\n  };\n\n  if (i == 0) {\n    var tds = trs[i].querySelectorAll('td'); //循环第一行中的td\n\n    for (var j = 0; j < tds.length; j++) {\n      var tdArr = [];\n      tdArr.push(tds[j].querySelector('label').textContent.trim());\n      trArr.leftTitle.push(tdArr); //遍历select\t\t\t\n\n      var sel = tds[0].querySelectorAll('select');\n\n      if (tds[j].querySelector('select') != null) {\n        for (var k = 0; k < sel.length; k++) {\n          var selArr = []; //selArr.push(sel[k].querySelector(\"option[selected='selected']\").textContent);\n\n          var opt = sel[k].querySelectorAll('option');\n\n          for (var m = 0; m < opt.length; m++) {\n            if (opt[m].selected == true) {\n              selArr.push(opt[m].textContent);\n            }\n\n            selArr.push(opt[m].textContent);\n          }\n\n          trArr.sel.opt.push(selArr);\n          trArr.sel.optType.push(sel[k].getAttribute('name'));\n        }\n      }\n    }\n\n    trArr.iptType.push(tds[1].querySelectorAll('input')[0].getAttribute('name'));\n    trArr.iptType.push(tds[1].querySelectorAll('input')[1].getAttribute('name'));\n    trArr.iptType.push(tds[2].querySelectorAll('input')[0].getAttribute('name'));\n    trArr.iptVal.push(tds[1].querySelectorAll('input')[0].value);\n    trArr.iptVal.push(tds[1].querySelectorAll('input')[1].value);\n    trArr.iptVal.push(tds[2].querySelectorAll('input')[0].value);\n  } else if (i == 1) {\n    var tds = trs[i].querySelectorAll('td'); //循环第一行中的td\n\n    for (var j = 0; j < tds.length; j++) {\n      var tdArr = [];\n      tdArr.push(tds[j].querySelector('label').textContent.trim());\n      trArr.leftTitle.push(tdArr); //遍历select\t\t\t\n\n      var sel = tds[2].querySelectorAll('select');\n\n      if (tds[j].querySelector('select') != null) {\n        for (var k = 0; k < sel.length; k++) {\n          var selArr = []; //selArr.push(sel[k].querySelector(\"option[selected='selected']\").textContent);\n\n          var opt = sel[k].querySelectorAll('option');\n\n          for (var m = 0; m < opt.length; m++) {\n            if (opt[m].selected == true) {\n              selArr.push(opt[m].textContent);\n            }\n\n            selArr.push(opt[m].textContent);\n          }\n\n          trArr.sel.opt.push(selArr);\n          trArr.sel.optType.push(sel[k].getAttribute('name'));\n        }\n      }\n    }\n\n    trArr.iptType.push(tds[0].querySelectorAll('input')[0].getAttribute('name'));\n    trArr.iptType.push(tds[1].querySelectorAll('input')[0].getAttribute('name'));\n    trArr.iptType.push(tds[1].querySelectorAll('input')[1].getAttribute('name'));\n    trArr.iptVal.push(tds[0].querySelectorAll('input')[0].value);\n    trArr.iptVal.push(tds[1].querySelectorAll('input')[1].checked);\n    trArr.iptVal.push(tds[1].querySelectorAll('input')[0].checked);\n  } else if (i == 2) {\n    var tds = trs[i].querySelectorAll('td');\n\n    for (var j = 0; j < tds.length; j++) {\n      var tdArr = [];\n\n      if (tds[j].textContent.trim() != \"\") {\n        tdArr.push(tds[j].querySelector('label').textContent.trim());\n        trArr.leftTitle.push(tdArr);\n      }\n    }\n\n    trArr.iptType.push(tds[0].querySelectorAll('input')[0].getAttribute('name'));\n    trArr.iptVal.push(tds[0].querySelectorAll('input')[0].value);\n  } else if (i == 3) {\n    trArr.btn = trs[i].querySelector('button').textContent.trim();\n  }\n\n  data.content.push(trArr);\n}\nreturn data;\n"
  doAction: |
    if (data.eventType == 'onchange') {
      // debugger;
      var selId = data.dataCustom[0];
      var index = data.dataCustom[1];
      var txt = data.dataCustom[2];
      var target = elem.querySelector("select[name='" + selId + "']");
      elem.querySelector("select[name='" + selId + "']").querySelectorAll('option')[index].selected = true;
      target.dispatchEvent(new Event('change'));
    } else if (data.eventType == 'onclickDate') {
      var selId = data.dataCustom[0];
      var val = data.dataCustom[1];
      var target = elem.querySelector("input[name='" + selId + "']");
      target.value = val;
      target.focus();
    } else if (data.eventType == 'onblur') {
      var selId = data.dataCustom[0];
      var val = data.dataCustom[1];
      var target = elem.querySelector("input[name='" + selId + "']");
      target.value = val;
    } else if (data.eventType == 'onclickRadius') {
      var index = data.dataCustom[0];
      var sel = data.dataCustom[1];
      var target = elem.querySelectorAll("input[type='radio']")[index];
      target.checked = sel;
      target.click();
    } else if (data.eventType == 'onclickBtn') {
      var target = elem.querySelector("button");
      target.click();
    }
- name: 带弹框的基本信息
  getTemplate: "module.exports = React.createClass({\n  click:function(e){\n    var target = e.target;\n    // debugger;\n    if(target.tagName.toLowerCase() == 'i'){\n      target = target.parentElement.parentElement;\n    }\n    if(target.tagName.toLowerCase() == 'a'){\n      target = target.parentElement;\n    }\n    if(target.previousSibling.className == 'content disnone'){\n      target.previousSibling.className = 'content';\n      target.querySelector('a').className = 'xia';\n    }else{\n      target.previousSibling.className = 'content disnone';\n      target.querySelector('a').className = 'shang';\n    }\n  },\n  onblur:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'blur',\n        data:[target.dataset.index,target.value]\n      })\n    }\n  },\n  onclickRadio:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'clickRadio',\n        data:[target.dataset.checked,target.dataset.index]\n      })\n    }\n  },\n  onclickBtn:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'clickBtn',\n        data:target.getAttribute('id')\n      })\n    }\n  },\n  onclickhrefA:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'clickhrefA',    \n        data:target.getAttribute('id')\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    var lis = data.content.map(function(ele,index){\n      if(index<2){\n        var lisele = ele.map(function(d,i){\n          return(\n          \t<div className='contenttit'>\n            \t<div className='contentitem'>{d.left}</div>\n              <div className='contentitem'> <AInput value={d.right} readOnly={d.readyState}/></div>\n            </div>\n          )\n        })\n        return(\n        \t<div>{lisele}</div>\n        )\n      }\n    })\n    var list = data.content.map(function(ele,index){\n      if(index>1){\n        var lisele = ele.map(function(d,i){\n          if(!d.type){\n            return(\n          \t<div className='contenttit'>\n            \t<div className='contentitem'>{d.left}</div>\n              <div className='contentitem'>\n                \n                {d.readyState==true?<AInput value={d.right} readOnly={d.readyState}/>:<AInput value={d.right} readOnly={d.readyState} onBlur={_this.onblur.bind(_this)} data-index={index}/>}\n                \n              </div>\n            </div>\n          )\n          }else{\n            if(d.type == 'textarea'){\n              return(\n              \t<div className='contenttit'>\n                \t<div className='contentitem'>{d.left}</div>\n                  <div className='contentitem'><textarea value={d.right}></textarea></div>\n                </div>\n              )\n            }else if(d.type == 'radio'){\n              return(\n              \t<div className='contenttit'>\n                \t<div className='contentitem'>{d.left}</div>\n                  <div className='contentitem ysp-radioBtn-tt'>\n                  \t\t<span className={d.right[0]==true?\"ysp-RadiusSelected-tt\":\"ysp-RadiusUnselected-tt\"} data-checked={d.right[0]} data-index={0} onClick={_this.onclickRadio.bind(_this)}>是</span>\n                    \t<span className={d.right[1]==true?\"ysp-RadiusSelected-tt\":\"ysp-RadiusUnselected-tt\"} data-checked={d.right[1]} data-index={1} onClick={_this.onclickRadio.bind(_this)}>否</span>\n                  </div>\n                </div>\n              )\n            }else if(d.type == 'submit'){\n              return(\n              \t<div className='contenttit'>                \t\n                  <div className='contentitem ysp-submitBtn-tt'>\n                  \t\t<button id={d.left} onClick={_this.onclickBtn.bind(_this)}>{d.right}</button>\n                  </div>\n                </div>\n              )\n            }else if(d.type == 'a'){\n              return(\n              \t<div className='contenttit'>                \t\n                  <div className='contentitem ysp-hrefA-tt'>\n                  \t\t<span id={d.left} onClick={_this.onclickhrefA.bind(_this)}>{d.right}</span>\n                  </div>\n                </div>\n              )\n            }\n            \n          }\n        })\n        return(\n        \t<div>{lisele}</div>\n        )\n      }\n    })\n    return (\n      <div className='information'>\n       \t<div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='content'>\n          {lis}</div>\n        <div className='content disnone'>\n          {list}\n          <div className='contentitem' style={{'border-bottom':'1px solid #e0e0e0','width':'100%','text-align':'right'}}>\n            <a href='javascript:;'>{data.content[2][data.content[2].length-1].text}</a>\n          </div>\n        </div>\n        <span onClick={_this.click}><a className='shang' href='javascript:;'></a>显示更多内容</span>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {}; // var table = elem.querySelectorAll('table')[0];
    var trs = elem.querySelectorAll('tr');
    data.title = '基本信息';
    data.content = [];
    for (var i = 0; i < trs.length; i++) {
      var arr = [];
      var tds = trs[i].querySelectorAll('td');

      for (var k = 0; k < tds.length; k++) {
        if (tds[k].querySelector('span') == null) {
          if (tds[k].querySelector("input[type='text']")) {
            arr.push({
              left: tds[k].querySelector('label').textContent.trim(),
              right: tds[k].querySelector('input').value,
              readyState: tds[k].querySelector('input').readOnly
            });
          }

          if (tds[k].querySelector('textarea')) {
            arr.push({
              left: tds[k].querySelector('label').textContent.replace(/\s+/g, ''),
              right: tds[k].querySelector('textarea').value,
              type: 'textarea'
            });
          }

          if (tds[k].querySelector("input[type='radio']")) {
            arr.push({
              left: tds[k].querySelector('label').textContent.replace(/\s+/g, ''),
              right: [tds[k].querySelectorAll("input[type='radio']")[0].checked, tds[k].querySelectorAll("input[type='radio']")[1].checked],
              type: 'radio'
            });
          }

          if (tds[k].querySelector("input[type='submit']")) {
            arr.push({
              left: tds[k].querySelector("input[type='submit']").getAttribute('id'),
              right: tds[k].querySelector("input[type='submit']").value,
              type: 'submit'
            });
          }

          if (tds[k].querySelector("a")) {
            arr.push({
              left: tds[k].querySelector('a').getAttribute('id'),
              right: tds[k].querySelector("a").textContent,
              type: 'a'
            });
          }
        }
      }

      data.content.push(arr);
    }
    return data;
  doAction: |
    if (data.eventType == 'clickRadio') {
      var check = data.dataCustom[0];
      var index = data.dataCustom[1];
      var target = elem.querySelectorAll("input[type='radio']")[index];
      target.checked = check;
    } else if (data.eventType == 'blur') {
      var index = parseInt(data.dataCustom[0]);
      var val = data.dataCustom[1];
      var target = elem.querySelectorAll('tr')[index].querySelectorAll("input");

      for (var i = 0; i < target.length; i++) {
        if (target[i].readOnly == false) {
          target[i].value = val;
        }
      }
    } else if (data.eventType == 'clickBtn') {
      var id = data.dataCustom;
      var target = elem.querySelector("#" + id);
      target.click();
    } else if (data.eventType == 'clickhrefA') {
      var id = data.dataCustom;
      var target = elem.querySelector("#" + id);
      target.click();
    }
- name: 弹框头部
  getTemplate: "import { Header, HeaderLeft } from 'ysp-interior-components';\n//import { back } from 'appRenderer';\nmodule.exports = React.createClass({\n  click:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n      \teventType:'back'  \n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData;\n    return (\n      <div className='titleH1'>\n          <Header title={data.title}>\n    \t\t\t\t<HeaderLeft>\n      \t\t\t\t<span></span><button onClick={this.click.bind(this)}>返回</button>\n    \t\t\t\t</HeaderLeft>\n  \t\t\t\t</Header>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {};
    data.title = elem.textContent;
    return data;
  doAction: |
    if (data.eventType == 'back') {
      //debugger;
      var target = elem.ownerDocument.defaultView.frameElement.parentElement.ownerDocument.defaultView.frameElement.contentDocument.querySelector('.aui_close');
      target.click();
    }
- name: 弹框日期筛选
  getTemplate: "module.exports = React.createClass({\n  onclickBtn:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'clickBtn'\n      })\n    }\n  },\n  onblurDate:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'blurDate',\n        data:[target.getAttribute('id'),target.value]\n      })\n    }\n  },\n  render: function() {\n    var data=this.props.customData;\n    var _this=this;\n    var lists=data.content.map(function(d,i){\n      var list=d.map(function(dd,ii){\n        if(dd.type=='button'){\n          return(\n          \t<button onClick={_this.onclickBtn.bind(_this)}>{dd.left}</button>\n          )\n        }else{\n          return(\n        \t\t<div>\n            \t<span>{dd.left}</span>\n              <AInput type='date' id={dd.id[0]} value={dd.right[0]} onBlur={_this.onblurDate.bind(_this)}/>\n              <AInput type='date' id={dd.id[1]} value={dd.right[1]} onBlur={_this.onblurDate.bind(_this)}/>\n              <span>—></span>\n            </div>\n        \t)\n        }\n        \n      })\n      return(\n      \t\t<div className='ysp-checkDateContent-tt'>{list}</div>\n      )\n    })\n    return (\n      <div className='ysp-checkDate-tt'>\n       {lists}\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {
      content: []
    };
    var trs = elem.querySelectorAll('tr');
    for (var i = 0; i < trs.length; i++) {
      var arr = [];
      var tds = trs[i].querySelectorAll('td');

      for (var j = 0; j < tds.length; j++) {
        if (tds[j].querySelector('button')) {
          arr.push({
            left: tds[j].querySelector('button').textContent.trim(),
            type: 'button'
          });
        } else {
          arr.push({
            left: tds[j].querySelector('label').textContent.trim(),
            right: [tds[j].querySelectorAll('input')[0].value, tds[j].querySelectorAll('input')[1].value],
            id: [tds[j].querySelectorAll('input')[0].getAttribute('id'), tds[j].querySelectorAll('input')[1].getAttribute('id')]
          });
        }
      }

      data.content.push(arr);
    }
    return data;
  doAction: |
    if (data.eventType == 'clickBtn') {
      var target = elem.querySelector('button');
      target.click();
    } else if (data.eventType == 'blurDate') {
      var id = data.dataCustom[0];
      var val = data.dataCustom[1];
      var target = elem.querySelector("#" + id);
      target.value = val;
    }
- name: 已办事项说明
  getTemplate: "module.exports = React.createClass({\n  onblur:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'blur',\n        data:target.value\n      })\n    }\n  },\n  render: function() {\n    var data=this.props.customData;\n    var _this=this;\n  \tvar list=data.content.map(function(d,i){\n      return(\n       \t<div>\n        \t\t {d.readyState==false?<ATextarea value={d.val} readOnly={d.readyState} onBlur={_this.onblur.bind(_this)}></ATextarea>:<ATextarea value={d.val} readOnly={d.readyState}></ATextarea>}\n        </div>\n      )\n    })\n    return (\n      <div className='ysp-sxsm-tt'>\n        <div className='ysp-sxsmTitle-tt'>{data.title}</div>\n       \t{list}\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {
      content: []
    };
    var trs = elem.querySelectorAll('tr');
    for (var i = 0; i < trs.length; i++) {
      var tds = trs[i].querySelectorAll('td');

      for (var j = 0; j < tds.length; j++) {
        if (tds[j].querySelector('textarea')) {
          data.content.push({
            val: tds[j].querySelector('textarea').value,
            readyState: tds[j].querySelector('textarea').readOnly
          });
        } else {
          data.title = tds[j].textContent.trim();
        }
      }
    }
    return data;
  doAction: |
    if (data.eventType == 'blur') {
      var val = data.dataCustom;
      var target = elem.querySelector('textarea');
      target.value = val;
    }
- name: 分页滚动
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler;\n    var target = e.target;\n    if(handler){\n      handler({\n        eventType:'click',\n        data:target.getAttribute('data-id')\n      })\n    }\n  },\n  onclickpage:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'onclickpage',\n        data:[target.dataset.index,target.dataset.id]\n      })\n    }\n  },\n  onclickpreOnce:function(e){\n    var handler = this.props.customHandler;\n    var target = e.target;\n    if(handler){\n      handler({\n        eventType:'onclickpreOnce'\n        \n      })\n    }\n  },\n  onClicknextOnce:function(e){\n    var handler = this.props.customHandler;\n    var target = e.target;\n    if(handler){\n      handler({\n        eventType:'onClicknextOnce',\n        \n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData;\n    if(!data){\n      return (\n        <div>\n        \t\n        </div>\n      )\n    }\n    var str = '<',kr = '|<',\n        _this = this;\n    var lis = data.map(function(ele,index){\n      if(index!=0&&index!=data.length-1){\n        if(ele.type!='nextPage'){\n           return(\n              <li data-id={index} onClick={_this.onClick} className={ele.class}>{ele.text}</li>\n            )\n        }\n        \n      }\n    })\n    return (\n      <div className='footerbtn'>\n        <ul>\n          <span>\n          \t\t<li data-id='prevPage' data-index={0} onClick={_this.onclickpage.bind(_this)} className='ysp-prePage'>{kr}</li>\n          \t\t{data[1].type=='nextPage'?<li data-id='prev' onClick={_this.onclickpreOnce.bind(_this)} className='ysp-preOnce'>{str}</li>:''}\n          </span>\n          \n          <span className='ysp-pageBtnScroll-tt'><span>{lis}</span></span>\n          <span>\n          \t\t{data[data.length-2].type=='nextPage'?<li data-id='next' onClick={_this.onClicknextOnce.bind(_this)} className='ysp-nextOne'>></li>:''}\n          \t\t<li data-id='nextPage' data-index={data.length-1} onClick={_this.onclickpage.bind(_this)} className='ysp-nextPage'>>|</li>\n          </span>\n         \n        </ul>\n      </div>\n    )\n  }\n});"
  getData: |
    //console.log(elem);
    if (!elem) {
      return "";
    }
    if (elem) {
      var data = [];
      var nodes = elem.children;

      for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].textContent.trim() == '...') {
          data.push({
            text: nodes[i].textContent.trim(),
            type: 'nextPage'
          });
        } else {
          data.push({
            text: nodes[i].textContent.trim(),
            class: nodes[i].className
          });
        }
      }

      return data;
    }
  doAction: |
    if (data.eventType == 'click') {
      //debugger;
      var index = parseInt(data.dataCustom);

      if (index == 1) {
        var target = elem.querySelectorAll('a')[index];
        target.click();
      } else {
        var target = elem.querySelectorAll('a')[index - 1];
        target.click();
      }
    } else if (data.eventType == 'onclickpage') {
      //debugger;
      var index = parseInt(data.dataCustom[0]);
      var id = data.dataCustom[1];

      if (id == 'prevPage') {
        var target = elem.querySelectorAll('a')[index];
        target.click();
      } else if (id == 'nextPage') {
        var target = elem.querySelectorAll('a')[index - 1];
        target.click();
      }
    } else if (data.eventType == 'onClicknextOnce') {
      // debugger;
      var trs = elem.querySelectorAll('a');
      var trsLen = trs.length;

      if (trs[trsLen - 2].textContent.trim() == '...') {
        var target = trs[trsLen - 2];
        target.click();
      }
    } else if (data.eventType == 'onclickpreOnce') {
      debugger;
      var trs = elem.querySelectorAll('a');
      var trsLen = trs.length;

      if (trs[1].textContent.trim() == '...') {
        var target = trs[1];
        target.click();
      }
    } // } else if (data.eventType == 'onclickpreOnce') {
    //   // debugger;
    //   var child = elem.querySelectorAll('a');
    //   var end = parseInt(elem.querySelector('.cpb').textContent);
    //   for (var i = end; i > 0; i--) {
    //     if (i == 1) {
    //       alert('已经到首页了');
    //     } else {
    //       child[i - 1].click();
    //       break;
    //     }
    //   }
    // } else if (data.eventType == 'onClicknextOnce') {
    //   var child = elem.querySelectorAll('a');
    //   var start = parseInt(elem.querySelector('.cpb').textContent);
    //   for (var i = start; i < child.length; i++) {
    //     if (i == child.length - 1) {
    //       alert('已经到末页了');
    //     } else {
    //       child[i].click();
    //       break;
    //     }
    //   }
    // }
- name: 环节信息（带编号）
  getTemplate: "module.exports = React.createClass({\n  render: function() {\n    var data = this.props.customData;\n    var lis = data.content.map(function(ele,index){\n      if(index > 0){\n        return(\n      \t<div><span>{index}、</span>{ele}</div>\n      )\n      }\n    })\n    return (\n      <div className='Auditor'>\n        <div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='content'><div className='contentitem'>{data.content[0].left}</div><div className='contentitem'>{lis}</div></div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    data.title = '环节信息';

    data.content = [];

    data.content.push({
      left: elem.querySelector('tr').querySelector('td').textContent.trim()
    });

    var trs =
    elem.querySelector('tr').querySelectorAll('td')[1].querySelectorAll('tr');

    for (var i = 0; i < trs.length; i++) {
      data.content.push(trs[i].textContent.trim());
    }

    return data;
  doAction: ''
- name: 带select的基本信息
  getTemplate: "module.exports = React.createClass({\n  click:function(e){\n    var target = e.target;\n    // debugger;\n    if(target.tagName.toLowerCase() == 'i'){\n      target = target.parentElement.parentElement;\n    }\n    if(target.tagName.toLowerCase() == 'a'){\n      target = target.parentElement;\n    }\n    if(target.previousSibling.className == 'content disnone'){\n      target.previousSibling.className = 'content';\n      target.querySelector('a').className = 'xia';\n    }else{\n      target.previousSibling.className = 'content disnone';\n      target.querySelector('a').className = 'shang';\n    }\n  },\n  onblur:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'blur',\n        data:[target.dataset.index,target.value]\n      })\n    }\n  },\n  onclickRadio:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'clickRadio',\n        data:[target.dataset.checked,target.dataset.index]\n      })\n    }\n  },\n  onclickBtn:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'clickBtn',\n        data:target.getAttribute('id')\n      })\n    }\n  },\n  onclickhrefA:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'clickhrefA',    \n        data:target.getAttribute('id')\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n   var lis = data.content.map(function(ele,index){\n      if(index<2){\n        var lisele = ele.map(function(d,i){\n          if(!d.type){\n            return(\n          \t<div className='contenttit'>\n            \t<div className='contentitem'>{d.left}</div>\n              <div className='contentitem'>\n                \n                {d.readyState==true?<AInput value={d.right} readOnly={d.readyState}/>:<AInput value={d.right} readOnly={d.readyState} onBlur={_this.onblur.bind(_this)} data-index={index}/>}\n                \n              </div>\n            </div>\n          )\n          }else{\n            if(d.type == 'textarea'){\n              return(\n              \t<div className='contenttit'>\n                \t<div className='contentitem'>{d.left}</div>\n                  <div className='contentitem'><textarea value={d.right} readOnly={d.readyState}></textarea></div>\n                </div>\n              )\n            }else if(d.type == 'radio'){\n              return(\n              \t<div className='contenttit'>\n                \t<div className='contentitem'>{d.left}</div>\n                  <div className='contentitem ysp-radioBtn-tt'>\n                  \t\t<span className={d.right[0]==true?\"ysp-RadiusSelected-tt\":\"ysp-RadiusUnselected-tt\"} data-checked={d.right[0]} data-index={0} onClick={_this.onclickRadio.bind(_this)}>是</span>\n                    \t<span className={d.right[1]==true?\"ysp-RadiusSelected-tt\":\"ysp-RadiusUnselected-tt\"} data-checked={d.right[1]} data-index={1} onClick={_this.onclickRadio.bind(_this)}>否</span>\n                  </div>\n                </div>\n              )\n            }else if(d.type == 'submit'){\n              return(\n              \t<div className='contenttit'>                \t\n                  <div className='contentitem ysp-submitBtn-tt'>\n                  \t\t<button id={d.left} onClick={_this.onclickBtn.bind(_this)}>{d.right}</button>\n                  </div>\n                </div>\n              )\n            }else if(d.type == 'a'){\n              return(\n              \t<div className='contenttit'>                \t\n                  <div className='contentitem ysp-hrefA-tt'>\n                  \t\t<span id={d.left} onClick={_this.onclickhrefA.bind(_this)}>{d.right}</span>\n                  </div>\n                </div>\n              )\n            }else if(d.type=='sel'){\n              var opt=d.right.map(function(opt,optId){\n                if(optId!=1){\n                  \treturn(\n                      <option selected={d.selected==opt?true:false}>{opt}</option>\n                    )\n                }\n                \n              })\n              return(\n              \t<div className='contenttit'>                \t\n                  <div className='contentitem'>{d.left}</div>\n                   <div className='contentitem'><select disabled={d.disable}>{opt}</select></div>\n                </div>\n              )\n            }\n            \n          }\n        })\n        return(\n        \t<div>{lisele}</div>\n        )\n      }\n    })\n    var list = data.content.map(function(ele,index){\n      if(index>1){\n        var lisele = ele.map(function(d,i){\n          if(!d.type){\n            return(\n          \t<div className='contenttit'>\n            \t<div className='contentitem'>{d.left}</div>\n              <div className='contentitem'>\n                \n                {d.readyState==true?<AInput value={d.right} readOnly={d.readyState}/>:<AInput value={d.right} readOnly={d.readyState} onBlur={_this.onblur.bind(_this)} data-index={index}/>}\n                \n              </div>\n            </div>\n          )\n          }else{\n            if(d.type == 'textarea'){\n              return(\n              \t<div className='contenttit'>\n                \t<div className='contentitem'>{d.left}</div>\n                  <div className='contentitem'><textarea value={d.right} readOnly={d.readyState}></textarea></div>\n                </div>\n              )\n            }else if(d.type == 'radio'){\n              return(\n              \t<div className='contenttit'>\n                \t<div className='contentitem'>{d.left}</div>\n                  <div className='contentitem ysp-radioBtn-tt'>\n                  \t\t<span className={d.right[0]==true?\"ysp-RadiusSelected-tt\":\"ysp-RadiusUnselected-tt\"} data-checked={d.right[0]} data-index={0} onClick={_this.onclickRadio.bind(_this)}>是</span>\n                    \t<span className={d.right[1]==true?\"ysp-RadiusSelected-tt\":\"ysp-RadiusUnselected-tt\"} data-checked={d.right[1]} data-index={1} onClick={_this.onclickRadio.bind(_this)}>否</span>\n                  </div>\n                </div>\n              )\n            }else if(d.type == 'submit'){\n              return(\n              \t<div className='contenttit'>                \t\n                  <div className='contentitem ysp-submitBtn-tt'>\n                  \t\t<button id={d.left} onClick={_this.onclickBtn.bind(_this)}>{d.right}</button>\n                  </div>\n                </div>\n              )\n            }else if(d.type == 'a'){\n              return(\n              \t<div className='contenttit'>                \t\n                  <div className='contentitem ysp-hrefA-tt'>\n                  \t\t<span id={d.left} onClick={_this.onclickhrefA.bind(_this)}>{d.right}</span>\n                  </div>\n                </div>\n              )\n            }else if(d.type=='sel'){\n              var opt=d.right.map(function(opt,optId){\n                if(optId!=1){\n                  \treturn(\n                      <option selected={d.selected==opt?true:false}>{opt}</option>\n                    )\n                }\n                \n              })\n              return(\n              \t<div className='contenttit'>                \t\n                  <div className='contentitem'>{d.left}</div>\n                  <select disabled={d.disable}>{opt}</select>\n                </div>\n              )\n            }\n            \n          }\n        })\n        return(\n        \t<div>{lisele}</div>\n        )\n      }\n    })\n    return (\n      <div className='information'>\n       \t<div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='content'>\n          {lis}</div>\n        <div className='content disnone'>\n          {list}\n          <div className='contentitem' style={{'border-bottom':'1px solid #e0e0e0','width':'100%','text-align':'right'}}>\n            <a href='javascript:;'>{data.content[2][data.content[2].length-1].text}</a>\n          </div>\n        </div>\n        <span onClick={_this.click}><a className='shang' href='javascript:;'></a>显示更多内容</span>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {}; // var table = elem.querySelectorAll('table')[0];
    var trs = elem.querySelectorAll('tr');
    data.title = '基本信息';
    data.content = [];
    for (var i = 0; i < trs.length; i++) {
      var arr = [];
      var tds = trs[i].querySelectorAll('td');

      for (var k = 0; k < tds.length; k++) {
        if (tds[k].querySelector('span') == null) {
          if (tds[k].querySelector("input[type='text']")) {
            arr.push({
              left: tds[k].querySelector('label').textContent.trim(),
              right: tds[k].querySelector("input[type='text']").value,
              readyState: tds[k].querySelector("input[type='text']").readOnly
            });
          }

          if (tds[k].querySelector('textarea')) {
            arr.push({
              left: tds[k].querySelector('label').textContent.replace(/\s+/g, ''),
              right: tds[k].querySelector('textarea').value,
              readyState: tds[k].querySelector('textarea').readOnly,
              type: 'textarea'
            });
          }

          if (tds[k].querySelector("input[type='radio']")) {
            arr.push({
              left: tds[k].querySelector('label').textContent.replace(/\s+/g, ''),
              right: [tds[k].querySelectorAll("input[type='radio']")[0].checked, tds[k].querySelectorAll("input[type='radio']")[1].checked],
              type: 'radio'
            });
          }

          if (tds[k].querySelector("input[type='submit']")) {
            arr.push({
              left: tds[k].querySelector("input[type='submit']").getAttribute('id'),
              right: tds[k].querySelector("input[type='submit']").value,
              type: 'submit'
            });
          }

          if (tds[k].querySelector("a")) {
            arr.push({
              //left: tds[k].querySelector('a').getAttribute('id'),
              right: tds[k].querySelector("a").textContent,
              type: 'a'
            });
          }

          if (tds[k].querySelector('select')) {
            var sel = [];
            var selected = '';
            var opt = tds[k].querySelector('select').querySelectorAll('option'); //debugger;

            for (var m = 0; m < opt.length; m++) {
              if (opt[m].selected == true) {
                selected = opt[m].textContent;
              }

              sel.push(opt[m].textContent);
            }

            arr.push({
              left: tds[k].querySelector("label").textContent.trim(),
              selected: selected,
              right: sel,
              disable: tds[k].querySelector('select').disabled,
              type: 'sel'
            });
          }
        }
      }

      data.content.push(arr);
    }
    return data;
  doAction: |
    if (data.eventType == 'clickRadio') {
      var check = data.dataCustom[0];
      var index = data.dataCustom[1];
      var target = elem.querySelectorAll("input[type='radio']")[index];
      target.checked = check;
    } else if (data.eventType == 'blur') {
      var index = parseInt(data.dataCustom[0]);
      var val = data.dataCustom[1];
      var target = elem.querySelectorAll('tr')[index].querySelectorAll("input");

      for (var i = 0; i < target.length; i++) {
        if (target[i].readOnly == false) {
          target[i].value = val;
        }
      }
    } else if (data.eventType == 'clickBtn') {
      var id = data.dataCustom;
      var target = elem.querySelector("#" + id);
      target.click();
    } else if (data.eventType == 'clickhrefA') {
      var id = data.dataCustom;
      var target = elem.querySelector('a');
      target.click();
    }
- name: 基本履历
  getTemplate: |-
    module.exports = React.createClass({
      onblur:function(e){
        var target=e.target;
        var handler=this.props.customHandler;
        if(handler){
          handler({
            eventType:'blur',
            data:target.value
          })
        }
      },
      render: function() {
        var data=this.props.customData;
        var _this=this;
        return (
          <div className='ysp-regularWorker-jbll-tt'>
            <p>{data.title}</p>
            {data.readyState==true?<ATextarea value={data.val} readOnly={data.readyState}></ATextarea>:<ATextarea value={data.val} readOnly={data.readyState} onBlur={_this.onblur.bind(_this)}></ATextarea>}
          </div>
        )
      }
    });
  getData: |
    if (!elem) {
      return;
    }
    var data = {};
    data.title = '基本履历';
    data.val = elem.querySelector('textarea').value;
    data.readyState = elem.querySelector('textarea').readOnly;
    return data;
  doAction: |
    if (data.eventType == 'blur') {
      var val = data.dataCustom;
      var target = elem.querySelector('textarea');
      target.value = val;
    }
- name: 个人优劣势综述
  getTemplate: "module.exports = React.createClass({\n  render: function() {\n    var data=this.props.customData;\n    var _this=this;\n    var list=data.content.map(function(d,i){\n      return(\n      \t<div>\n        \t\t<p><span>0{i+1}</span><span>{d[0]}</span></p>\n          <div>\n          \t\t<p><span>{data.titleBar[1]}</span><span>{d[1]}</span></p>\n            <p><span>{data.titleBar[2]}</span><span>{d[2]}</span></p>\n            <p><span>{data.titleBar[3]}</span><span>{d[3]}</span></p>\n          </div>\n        </div>\n      )\n    })\n    return (\n      <div className='ysp-grylszs-tt'>\n        <p>{data.title}</p>\n        {list}\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {
      titleBar: [],
      content: []
    };
    data.title = '个人优劣势综述';
    var trs = elem.querySelectorAll('tr');
    for (var i = 0; i < trs.length; i++) {
      if (i == 0) {
        var tds = trs[i].querySelectorAll('td');

        for (var j = 0; j < tds.length; j++) {
          data.titleBar.push(tds[j].textContent.trim());
        }
      } else if (i > 0) {
        var arr = [];
        var tds = trs[i].querySelectorAll('td');

        for (var j = 0; j < tds.length; j++) {
          arr.push(tds[j].textContent.trim());
        }

        data.content.push(arr);
      }
    }
    return data;
  doAction: ''
- name: 弹框图片头部
  getTemplate: "import { Header, HeaderLeft } from 'ysp-interior-components';\n//import { back } from 'appRenderer';\nmodule.exports = React.createClass({\n  click:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n      \teventType:'back'  \n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData;\n    if(data==undefined){return \"\"}\n    return (\n      <div className='titleH1'>\n          <Header title={data.title}>\n    \t\t\t\t<HeaderLeft>\n      \t\t\t\t<span></span><button onClick={this.click.bind(this)}>返回</button>\n    \t\t\t\t</HeaderLeft>\n  \t\t\t\t</Header>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {};
    data.title = "说明";
    return data;
  doAction: |
    if (data.eventType == 'back') {
      //debugger;
      var target = elem.parentElement.parentElement.parentElement.previousElementSibling.querySelector('.aui_close');
      target.click();
    }
- name: 弹框图片
  getTemplate: |-
    module.exports = React.createClass({
      render: function() {
        var data=this.props.customData;
        var src="http://172.16.11.61:8000/"+data
        return (
          <div>
            <img src={src}/>
          </div>
        )
      }
    });
  getData: |
    if (!elem) {
      return;
    }
    return elem.getAttribute('src');
  doAction: ''
- name: 已办附件
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target,\n        type = '',\n        data = '';\n    if(target.tagName.toLowerCase() == 'button'){\n      console.log(target.id);\n      if(target.id == 'uploadDiv' ){\n        type = 'commit';\n        data = 'btnFileUpload';\n      }else{\n        type = 'add';\n        data = 'btnFileUpload';\n      }\n    }\n    if(target.tagName.toLowerCase() == 'p'){\n      type = 'updel';\n      data = {\n        index:target.getAttribute('data-index'),\n        i:target.className=='xiazai'?0:1\n      }\n    }\n    if(handler){\n      handler({\n        eventType:type,\n        data:data\n      })\n    }\n  },\n  click:function(e){\n    var target = e.target;\n    if(target.className == 'shang'){\n      target.className = 'xia';\n      var divs = target.parentElement.parentElement.querySelectorAll('div.displnone');\n      for(var i=0;i<divs.length;i++){\n        divs[i].className = 'displblock';\n      }\n    }else{\n      target.className = 'shang';\n      var divs = target.parentElement.parentElement.querySelectorAll('div.displblock');\n      for(var i=0;i<divs.length;i++){\n        divs[i].className = 'displnone';\n      }\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    if(data==undefined){return \"\"}\n    var lis = data.content.map(function(ele,index){\n      var list = ele.map(function(d,i){\n        if(i==0){\n          return(\n          \t<div className='titlediv'>\n            \t<div>{'0'+(index+1)}</div>\n              <div>{d}</div>\n              <div onClick={_this.click} className='shang'></div>\n            </div>\n          )\n        }\n        if(i == ele.length-1){\n          if(d.length>2){\n              return(\n              <div className='displnone'>\n                <div className='contentitem contentspan' style={{'width':'100%','text-align-last':'auto','text-align':'center'}}><p className='shanchu' data-index={index} onClick={_this.onClick.bind(_this)}><span></span>{d[2]+d[3]}</p><p data-index={index} className='xiazai' onClick={_this.onClick.bind(_this)}><span></span>{d.length>2?d[0]+d[1]:''}</p></div>\n              </div>\n            )\n          }else{\n             return(\n              <div className='displnone'>\n                <div className='contentitem'><p className='xiazai' data-index={index} onClick={_this.onClick.bind(_this)}><span></span>{d[0]+d[1]}</p></div>\n              </div>\n            )\n          }\n        }\n        return(\n        \t<div className='displnone'>\n          \t<div className='contentitem'>{data.titles[i]}</div>\n            <div className='contentitem'>{d}</div>\n          </div>\n        )\n      })\n      return(\n      \t<div className='contentit'>{list}</div>\n      )\n    })\n    \n    return (\n      <div className='Enclosure'>\n        <div className='contenttitle'>\n          <span className='xia'></span>\n          <p>{data.title}\n            \n          </p>\n        </div>\n        <div className='content'>\n    \t\t\t{lis}\n        </div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = ysp.customHelper.getTabledata(elem, ['文件名', '上传人', '上传时间', '版本',
    '操作']);

    data.id = elem.nextElementSibling.nextElementSibling.id;

    data.title = '附件';

    return data;
  doAction: |
    var type = data.eventType;
    var data = data.customData;
    if (type == 'commit') {
      // debugger;
      elem.ownerDocument.querySelector("#" + data).click();
      setTimeout(function () {
        elem.ownerDocument.defaultView.InitAttachmentList();
      }, 1000); // setTimeout(function () {
      //   var url = ysp.appMain.getActiveUrl();
      //   ysp.appMain.reloadPage(url);
      // }, 2000);
    }
    if (type == 'add') {
      elem.ownerDocument.querySelector("#" + data).previousElementSibling.querySelector('input').click();
    }
    if (type == 'updel') {
      var tds = elem.querySelectorAll('tbody')[1].querySelectorAll('tr')[data.index].querySelectorAll('td');
      tds[tds.length - 1].querySelectorAll('a')[data.i].click();
    }
- name: 已办的审批日志
  getTemplate: "module.exports = React.createClass({\n  render: function() {\n    var data = this.props.customData;\n    if(data==undefined){return \"\" ;}\n    var ths = data.titles.map(function(d,i){\n      return(\n      \t<th>{d}</th>\n      )\n    })\n    var trs = data.content.map(function(d,i){\n      var lis = d.map(function(ele,index){\n        return(\n        \t<td>{ele}</td>\n        )\n      })\n      return(\n      \t<tr>{lis}</tr>\n      )\n    })\n    return (\n      <div className='examination'>\n        <div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='contentitem'>\n        \t<table>\n            <thead><tr>{ths}</tr></thead>\n            <tbody>{trs}</tbody>\n          </table>\n        </div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = ysp.customHelper.getTableData(elem, ['环节名称', '人员姓名', '人员公司',
    '人员部门', '人员职位', '审批操作', '审批时间', '意见']);

    data.title = '审批日志';

    return data;
  doAction: ''
- name: 加签人
  getTemplate: "module.exports = React.createClass({\n  click:function(){\n    var handler = this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'click'\n      })\n    }\n  },\n  onClick:function(){\n    var handler = this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'onclick'\n      })\n    }\n  },\n  btnclick:function(){\n    var handler = this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'btnclick'\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData;\n    return (\n      <div className='addlots'>\n        \t\t<div className='addtop'>{data.title}</div>\n            <div className='addname'>\n            <div>{data.ipt.text}</div>\n            <div>\n              <input value={data.ipt.iptvalue} id={data.ipt.id} readOnly={data.ipt.readonly} ></input><a href=\"javascript:;\" onClick={this.btnclick} ></a>\n            </div>\n          </div>\n          <div className='addcommit'>\n            <button onClick={this.click}>{data.commitbtn[0]}</button>\n            <button onClick={this.onClick}>{data.commitbtn[1]}</button>\n        \t</div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    data.title = elem.querySelector('div.top').textContent.trim();

    data.commitbtn = [];

    data.commitbtn.push('取消');

    data.commitbtn.push('确定'); // defaultView.frameElement

    data.ipt = {};

    data.ipt.text =
    elem.querySelector('table').textContent.trim().split('：')[0];

    data.ipt.iptvalue = elem.querySelector("input[type='text']").value;

    data.ipt.readonly = elem.querySelector("input[type='text']").readOnly;

    data.ipt.id = elem.querySelector("input[type='text']").id;

    return data;
  doAction: |
    var type = data.eventType;
    if (type == 'click') {
      elem.ownerDocument.defaultView.frameElement.parentElement.parentElement.parentElement.previousElementSibling.querySelector('a').click();
    }
    if (type == 'onclick') {
      elem.querySelector("input[type='submit']").click();
    }
    if (type == 'btnclick') {
      elem.querySelector('table').querySelector('a').click();
    }
- name: 人员选择
  getTemplate: "module.exports = React.createClass({\n   onClick:function(e){\n    var handler = this.props.customHandler,\n        target=  e.target,\n        type,data;\n    if(target.className=='subbtn'){\n      type = 'subbtn';\n      data = target.id;\n    }\n    if(target.className == 'waitopt'){\n      type = 'waitopt';\n      data = target.getAttribute('value');\n    }\n    if(target.className == 'shadow'){\n      type = 'shadowbtn';\n      data = target.getAttribute('data-id');\n    }\n    if(target.className == 'dellistopt'){\n      type = 'dellistopt';\n      data = target.parentElement.getAttribute('value');\n    }\n    if(handler){\n      handler({\n        eventType:type,\n        data:data\n      })\n    }\n  },\n  onChange:function(e){\n    var handler = this.props.customHandler,\n        target = e.target,type,data;\n    if(target.className=='txtipt'){\n      type = 'txtipt';\n      data = {\n        id:target.id,\n        value:target.value\n      }\n    }\n    if(handler){\n      handler({\n        eventType:type,\n        data:data\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    if(!data){\n      return '';\n    }\n    var awinselect = data.contentposition.waitoptions.map(function(d,i){\n             return(\n             \t<div className='waitopt' value={data.contentposition.waitoptvalue[i]} onClick={_this.onClick}>{d}</div>\n             )\n           })\n           var listselect = data.contentposition.listoptions.map(function(d,i){\n             return(\n             \t<div value={data.contentposition.listoptvalue[i]}>{d}<span className='dellistopt' onClick={_this.onClick}></span></div>\n             )\n           })\n    return (\n      <div>\n        <div className='floatbox'>\n                <div className='boxtitle'>查询条件</div>\n                <div className='ipttop'>\n                  <input className='txtipt' onChange={_this.onChange} id={data.contentposition.txtid} />\n                  <button className='subbtn' onClick={_this.onClick} id={data.contentposition.btnid}>查询</button>\n                </div>\n                <div className='awinselect'>\n                     <div className='floatbox_title'>待选列表</div>\n                     <div>{awinselect}</div>\n                </div>\n                <div className='listselect'>\n                  <div className='floatbox_title'>已选列表</div>     \n                  <div>{listselect}</div>\n                </div>\n                <div className='footbtn'>\n                  <button data-id='1' className='shadow' onClick={_this.onClick}>取消</button>\n                  <button data-id='0' className='shadow' onClick={_this.onClick}>确定</button>\n                </div>\n              </div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    data.contentposition = {};

    data.contentposition.title = '查询条件';

    data.contentposition.btn = ['确定', '取消'];

    data.contentposition.flat = false;

    data.contentposition.waitoptions = [];

    data.contentposition.listoptions = [];

    data.contentposition.waitoptvalue = [];

    data.contentposition.waitid = 'listWaitingSelect';

    data.contentposition.listid = 'listSelected';

    data.contentposition.txtid = 'S_E_L_E_C_T_O_R_txtSearchEmployee';

    data.contentposition.btnid = 'S_E_L_E_C_T_O_R_btnSearchEmployee';

    data.contentposition.listoptvalue = []; // debugger;

    var ketbtn = elem.querySelectorAll('button');

    var waitselect = elem.querySelector('#listWaitingSelect');

    var options = waitselect.querySelectorAll('option');

    for (var t = 0; t < options.length; t++) {
      data.contentposition.waitoptions.push(options[t].textContent.trim());
      data.contentposition.waitoptvalue.push(options[t].value);
    }

    var listopts =
    elem.querySelector('#listSelected').querySelectorAll('option');

    for (var t = 0; t < listopts.length; t++) {
      data.contentposition.listoptions.push(listopts[t].textContent.trim());
      data.contentposition.listoptvalue.push(listopts[t].value);
    }

    return data;
  doAction: |
    var type = data.eventType;
    var data = data.customData;
    if (type == 'txtipt') {
      elem.querySelector("#" + data.id).value = data.value;
    }
    if (type == 'subbtn') {
      elem.querySelector("#" + data).click();
    }
    if (type == 'waitopt') {
      elem.querySelector('#listWaitingSelect').value = data;
      elem.querySelector('#listWaitingSelect').ondblclick();
    }
    if (type == 'shadowbtn') {
      elem.querySelectorAll('button')[data].click();
    }
    if (type == 'dellistopt') {
      elem.querySelector('#listSelected').value = data;
      elem.querySelector('#listSelected').ondblclick();
    }
- name: committable
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target,\n        type,data={};\n    //点击事件   点击进入详情页\n    if(target.tagName.toLowerCase() == 'div'){\n      type='td_click';\n      data.id = target.getAttribute('data-id');\n      data.text = target.querySelectorAll('div.Content_item')[0].textContent.trim();\n    }\n    \n    \n    if(handler){\n      handler({\n        eventType:type,\n        data:data\n      })\n    }\n  },\n  onclick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    //判断是否为下啦按钮   改变隐藏的元素display\n    if(target.getAttribute('data-id') == 'true'){\n      // target = (target.tagName.toLowerCase() == 'span')? target.parentElement:target;\n      target.setAttribute('data-id','false');\n      target.className = 'disbottom';\n      target.parentElement.parentElement.querySelector('div.Content_disnone').style.display = 'block';\n    }else{\n      target.setAttribute('data-id','true');\n      target.className = 'distop';\n      target.parentElement.parentElement.querySelector('div.Content_disnone').style.display = 'none';\n    }\n    if(handler){\n      handler({\n        type:'tag',\n        data:target.getAttribute('data-id')\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n    \t\t_this = this;\n    if(!data){\n      return '';\n    }\n    var lis = data.content.map(function(ele,index){\n      return(\n      \t<div className='Content' onClick={_this.onClick} data-id={index}>\n        \t<div>\n          \t<div className='Content_item'>\n            {ele[0]}</div>\n          <div className='Content_item'><p>{data.titles[1]}</p><p>{ele[1]}</p></div>\n          <div className='Content_item'>\n            <p>{data.titles[3]}</p><p>{ele[3]}</p></div>\n            <a className='distop' href='javascript:;' data-id='true' onClick={_this.onclick} ><span ></span></a>\n          </div>\n          <div data-id={index} className='Content_disnone'>\n          \t<div id='summary'>\n            \t<div>{data.titles[2]}</div>\n              <div>{ele[2]}</div>\n            </div>\n            <div>\n            \t<div>{data.titles[4]}</div>\n              <div>{ele[4]}</div>\n            </div>\n            <div>\n            \t<div>{data.titles[5]}</div>\n              <div>{ele[5]}</div>\n            </div>\n          </div>\n        </div>\n      )\n    })\n    return (\n      <div>\n        {lis}\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var content = ysp.customHelper.getTableData(elem, ['流程名称', '流程编号', '内容摘要',
    '申请人', '停留时间', '申请日期']); // var arr = ['请假申请单', '销假申请单', '离职申请单', '加班申请单',
    '因公外出申请单', '考勤异常申请单', '员工异动申请单', '招聘申请单', '员工合同续签申请单', '试用期转正申请单',
    '录用入职申请单', '培训申请单', '人才盘点信息表', '资产预算调整流程', '资产预算调整流程V2', '信用冻结订单释放申请流程',
    '资产类预算外申请流程V2', '借款/预付款申请单', '资产处理申请单', '差旅费用报销流程', '费用报销流程', '路线新增流程',
    '路线变更流程', '客资/送大方/销售人员.路线批量审批', '市场用品采购流程', '总部合同审批流程', '用印申请流程', '合同审批流程',
    '客资批量审批', '送达方批量审批', '路线批量审批'];

    // var data = ysp.customHelper.getDatamove(content, arr);

    // content.content = data.data;

    // content.index = data.index;

    return content;
  doAction: |
    var type = data.eventType,
        data = data.customData;
    if (type == 'td_click') {
      var arr = ['请假申请单', '销假申请单', '离职申请单', '加班申请单', '因公外出申请单', '考勤异常申请单', '员工异动申请单', '员工异动申请单V2', '招聘申请单', '员工合同续签申请单', '试用期转正申请单', '录用入职申请单', '培训申请单', '人才盘点信息表', '资产预算调整流程', '资产预算调整流程V2', '信用冻结订单释放申请流程', '资产类预算外申请流程V2', '借款/预付款申请单', '资产处理申请单', '差旅费用报销流程', '费用报销流程', '路线新增流程', '路线变更流程', '路线组变更申请', '客资/送大方/销售人员.路线批量审批', '市场用品采购流程', '总部合同审批流程', '用印申请流程', '合同审批流程', '客资批量审批', '送达方批量审批', '路线批量审批']; // debugger;

      var flat = arr.indexOf(data.text);

      if (flat == -1) {
        // ysp.appMain.openWindow('http://172.16.11.61:8000/Forms/Common/TY/Processing.aspx?SN=9532480E5364DF3BC577107FF40AC672&Guid=81c96722-bf68-45a8-8106-608995104db1&_ysp_forcepc=1');
        var hreflo = '';
        hreflo += elem.querySelectorAll('tr')[++data.id].querySelector('a').onclick.toString().split("ShowPage('")[1].split("')")[0];

        if (hreflo[0] == 'h') {
          hreflo += "&_ysp_forcepc=1";
          ysp.appMain.openWindow(hreflo);
        } else {
          hreflo = "http://172.16.11.61:8000:" + hreflo; // hreflo += elem.querySelectorAll('tr')[++data.id].querySelector('a').onclick.toString().split("ShowPage('")[1].split("')")[0];

          hreflo += "&_ysp_forcepc=1";
          ysp.appMain.openWindow(hreflo);
        }
      } else {
        elem.querySelectorAll('tr')[++data.id].querySelector('a').click();
      } // for (var i = 0; i < arr.length; i++) {
      //   if (arr[i] == data.text) {
      //     elem.querySelectorAll('tr')[data.id].querySelector('a').click();
      //   } else {
      //     window.location.href = 'http://172.16.11.61:8000/Forms/LA/HT/Processing.aspx?SN=9B1052B656E8EB71EED60E34F49F1CF2&Guid=bd7ac34d-574c-41a7-a64f-5bfa1488fbd3&_ysp_forcepc=1';
      //   }
      // }

    }
- name: 底部按钮
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target,\n        type = '',\n        data;\n    if(target.tagName.toLowerCase() == 'div'){\n      target.parentElement.nextElementSibling.style.display = 'block';\n      // target.parentElement.nextElementSibling.style.height = target.ownerDocument.style.height;\n      var lis = target.parentElement.parentElement.querySelector('.dianbl').querySelectorAll('li');\n      for(var i=0;i<lis.length;i++){\n        lis[i].style.bottom = i*50 +'px';\n      }\n    }\n    if(target.tagName.toLowerCase() == 'p'){\n      target.parentElement.parentElement.parentElement.style.display = 'none';\n    }\n    if(target.tagName.toLowerCase() == 'button'){\n      type = 'click';\n      data = target.getAttribute('data-id');\n    }\n    if(handler){\n      handler({\n        eventType:type,\n        data:data\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData;\n    var _this = this;\n    if(!data){\n      return '';\n    }\n  \tvar lis = data.map(function(d,i){\n      if(i<3){\n        return(\n        \t<button data-id={i} onClick={_this.onClick}>{d}</button>\n        )\n      }\n    })\n    var list = data.map(function(d,i){\n      if(i>2){\n        return(\n        \t<li><button data-id={i} onClick={_this.onClick}>{d}</button></li>\n        )\n      }\n    })\n    return (\n      <div className='submit'>\n        <div className='subtrue'><div>{lis}</div><div style={{'display':data.length>3?'block':\"none\"}} onClick={_this.onClick.bind(_this)}></div></div>\n        <div className='dianbl'><ul><li><p onClick={_this.onClick}>取消</p></li>{list}</ul></div>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = [];
    var lis = elem.querySelectorAll('li');
    for (var i = 0; i < lis.length; i++) {
      data.push(lis[i].textContent.trim());
    }
    return data;
  doAction: |
    var type = data.eventType;
    var data = data.customData;
    if (type == 'click') {
      elem.querySelectorAll('li')[data].querySelector('a').click();
    }
- name: 审批操作
  getTemplate: "module.exports = React.createClass({\n  onChange:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    if(handler){\n      handler({\n        eventType:'change',\n        data:target.value\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    return (\n      <div className='approval'>\n        <div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='content'>\n          \t<div className='contentitem'>{data.content[0].left}</div>\n          \t<div className='contentitem'>{data.content[0].right}</div>\n          </div>\n          <div className='content'>\n          \t<div className='contentitem'>{data.content[1].left}</div>\n            <textarea value={data.content[1].right} onChange={_this.onChange}></textarea>\n        \t</div>\n        <div className='tishi'>{data.content[2].left}</div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    data.title = '审批操作';

    data.content = [];

    var trs = elem.querySelectorAll('tr');

    var obj = {};

    var str = trs[0].querySelectorAll('td')[0].textContent.trim();

    var arr = str.split(":");

    obj.left =
    trs[0].querySelectorAll('td')[0].textContent.trim().split('：')[0]; //
    obj.left = arr;

    obj.right = trs[0].querySelectorAll('td')[1].textContent.trim();

    data.content.push(obj);

    var obj = {};

    obj.left =
    trs[1].querySelectorAll('td')[0].textContent.trim().split('：')[0];

    obj.right =
    trs[1].querySelectorAll('td')[1].querySelector('textarea').value;

    data.content.push(obj);

    data.content.push({
      left: trs[1].querySelectorAll('td')[1].querySelector('p').textContent.trim()
    });

    return data;
  doAction: |
    var type = data.eventType;
    var data = data.customData;
    if (type == 'change') {
      elem.querySelector('textarea').value = data;
    }
- name: 详情table
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target,\n        type,data={};\n    //点击事件   点击进入详情页\n    if(target.tagName.toLowerCase() == 'div'){\n      type='td_click';\n      var Contentele = ysp.customHelper.getparent(target,'Content');\n      data.id = Contentele.getAttribute('data-id');\n      data.text = Contentele.querySelectorAll('div.Content_item')[0].textContent.trim();\n    }\n    \n    \n    if(handler){\n      handler({\n        eventType:type,\n        data:data\n      })\n    }\n  },\n  onclick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    //判断是否为下啦按钮   改变隐藏的元素display\n    if(target.getAttribute('data-id') == 'true'){\n      // target = (target.tagName.toLowerCase() == 'span')? target.parentElement:target;\n      target.setAttribute('data-id','false');\n      target.className = 'disbottom';\n      target.parentElement.parentElement.querySelector('div.Content_disnone').style.display = 'block';\n    }else{\n      target.setAttribute('data-id','true');\n      target.className = 'distop';\n      target.parentElement.parentElement.querySelector('div.Content_disnone').style.display = 'none';\n    }\n    if(handler){\n      handler({\n        type:'tag',\n        data:target.getAttribute('data-id')\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n    \t\t_this = this;\n    if(!data){\n      return '';\n    }\n    var lis = data.content.map(function(ele,index){\n      return(\n      \t<div className='Content' onClick={_this.onClick} data-id={index}>\n        \t<div>\n          \t<div className='Content_item'>\n            {ele[0]}</div>\n          <div className='Content_item'><p>{data.titles[1]}</p><p>{ele[1]}</p></div>\n          <div className='Content_item'>\n            <p>{data.titles[3]}</p><p>{ele[3]}</p></div>\n            <a className='distop' href='javascript:;' data-id='true' onClick={_this.onclick} ><span ></span></a>\n          </div>\n          <div data-id={index} className='Content_disnone'>\n          \t<div id='summary'>\n            \t<div>{data.titles[2]}</div>\n              <div>{ele[2]}</div>\n            </div>\n            <div>\n            \t<div>{data.titles[4]}</div>\n              <div>{ele[4]}</div>\n            </div>\n            <div>\n            \t<div>{data.titles[5]}</div>\n              <div>{ele[5]}</div>\n            </div>\n          </div>\n        </div>\n      )\n    })\n    return (\n      <div>\n        {lis}\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var content = ysp.customHelper.getTableData(elem, ['流程名称', '流程编号', '内容摘要',
    '申请人', '停留时间', '申请日期']); // var arr = ['请假申请单', '销假申请单', '离职申请单', '加班申请单',
    '因公外出申请单', '考勤异常申请单', '员工异动申请单', '招聘申请单', '员工合同续签申请单', '试用期转正申请单',
    '录用入职申请单', '培训申请单', '人才盘点信息表', '资产预算调整流程', '资产预算调整流程V2', '信用冻结订单释放申请流程',
    '资产类预算外申请流程V2', '借款/预付款申请单', '资产处理申请单', '差旅费用报销流程', '费用报销流程', '路线新增流程',
    '路线变更流程', '客资/送大方/销售人员.路线批量审批', '市场用品采购流程', '总部合同审批流程', '用印申请流程', '合同审批流程',
    '客资批量审批', '送达方批量审批', '路线批量审批'];

    // var data = ysp.customHelper.getDatamove(content, arr);

    // content.content = data.data;

    // content.index = data.index;

    return content;
  doAction: |
    var type = data.eventType,
        data = data.customData;
    if (type == 'td_click') {
      var arr = ['请假申请单', '销假申请单', '离职申请单', '加班申请单', '因公外出申请单', '考勤异常申请单', '员工异动申请单', '员工异动申请单V2', '招聘申请单', '员工合同续签申请单', '试用期转正申请单', '录用入职申请单', '培训申请单', '人才盘点信息表', '资产预算调整流程', '资产预算调整流程V2', '信用冻结订单释放申请流程', '资产类预算外申请流程V2', '借款/预付款申请单', '资产处理申请单', '差旅费用报销流程', '费用报销流程', '路线新增流程', '路线变更流程', '路线组变更申请', '客资/送大方/销售人员.路线批量审批', '市场用品采购流程', '总部合同审批流程', '用印申请流程', '合同审批流程', '客资批量审批', '送达方批量审批', '路线批量审批']; // debugger;

      var flat = arr.indexOf(data.text);

      if (flat == -1) {
        // ysp.appMain.openWindow('http://172.16.11.61:8000/Forms/Common/TY/Processing.aspx?SN=9532480E5364DF3BC577107FF40AC672&Guid=81c96722-bf68-45a8-8106-608995104db1&_ysp_forcepc=1');
        var hreflo = '';
        hreflo += elem.querySelectorAll('tr')[++data.id].querySelector('a').onclick.toString().split("ShowPage('")[1].split("')")[0];

        if (hreflo[0] == 'h') {
          hreflo += "&_ysp_forcepc=1";
          ysp.appMain.openWindow(hreflo);
        } else {
          hreflo = "http://172.16.11.61:8000:" + hreflo; // hreflo += elem.querySelectorAll('tr')[++data.id].querySelector('a').onclick.toString().split("ShowPage('")[1].split("')")[0];

          hreflo += "&_ysp_forcepc=1";
          ysp.appMain.openWindow(hreflo);
        }
      } else {
        elem.querySelectorAll('tr')[++data.id].querySelector('a').click();
      } // for (var i = 0; i < arr.length; i++) {
      //   if (arr[i] == data.text) {
      //     elem.querySelectorAll('tr')[data.id].querySelector('a').click();
      //   } else {
      //     window.location.href = 'http://172.16.11.61:8000/Forms/LA/HT/Processing.aspx?SN=9B1052B656E8EB71EED60E34F49F1CF2&Guid=bd7ac34d-574c-41a7-a64f-5bfa1488fbd3&_ysp_forcepc=1';
      //   }
      // }
    }
- name: commit三种流程
  getTemplate: |-
    module.exports = React.createClass({
      onclick:function(e){
        var handler = this.props.customHandler;
        var target = e.target;
        if(handler){
          handler({
            eventType:'onclick'
          })
        }
      },
      handlerClick:function(e){
        var target = e.target;
        var title = target.dataset.title;
        var handler = this.props.customHandler;
        if(handler){
          handler({
            data: title,
            eventType:'click'
          })
        }
      },
      render: function() {
        var data = this.props.customData && this.props.customData.flag || [];
        return (
          <div class="ysp-index-title">
            <div className = {data[0] == "active" ? "ysp-index-title-color" : "ysp-index-title-noColor"} data-title = "待办" onClick={this.onclick.bind(this)}>新建申请</div>
            <div className = {data[1] == "active" ? "ysp-index-title-color" : "ysp-index-title-noColor"} data-title = "待办" onClick={this.handlerClick.bind(this)}>待办</div>
            <div className = {data[2] == "active" ? "ysp-index-title-color" : "ysp-index-title-noColor"} data-title = "已办" onClick={this.handlerClick.bind(this)}>已办</div>
          </div>
        )
      }
    });
  getData: >
    if (!elem) {
      return;
    }

    var data = {
      flag: []
    };

    data.flag.push(elem.previousElementSibling.previousElementSibling.querySelectorAll('li')[0].querySelector('a').getAttribute("class"));

    var lis = elem.querySelectorAll("li");

    for (var i = 0; i < lis.length - 1; i++) {
      var cla = lis[i].querySelector("a").getAttribute("class");
      data.flag.push(cla);
    }

    return data;
  doAction: |
    if ('click' == data.eventType) {
      var title = data.dataCustom;

      if ('待办' == title) {
        elem.querySelectorAll("li")[0].querySelector("a").click();
      } else {
        // var url = ysp.appMain.getActiveUrl();
        // ysp.appMain.openWindow(url);
        elem.querySelectorAll("li")[1].querySelector("a").click();
      }
    }
    if (data.eventType == 'onclick') {
      elem.previousElementSibling.previousElementSibling.querySelectorAll('li')[0].querySelector('a').click();
    }
- name: 首页快讯、公告等头
  getTemplate: "module.exports = React.createClass({\n  handlerClick:function(e){\n    var handler = this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'click'\n      })\n    }\n  },\n  render: function() {\n    return (\n      <div className='ysp-flash-hard'>\n        <div onClick={this.handlerClick.bind(this)}>\n          <span onClick={this.handlerClick.bind(this)}></span>\n          <span onClick={this.handlerClick.bind(this)}>返回</span>\n        </div>\n        <div>\n        \t<span>人事公告</span>\n        </div>\n        \n      </div>\n    )\n  }\n});"
  getData: ''
  doAction: |
    if ('click' == data.eventType) {
      ysp.customHelper.backHome();
    }
- name: 首页翻页(快讯、公告等)
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler;\n    var target = e.target;\n    if(handler){\n      handler({\n        eventType:'click',\n        data:target.getAttribute('data-id')\n      })\n    }\n  },\n  onclickpage:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'onclickpage',\n        data:[target.dataset.id]\n      })\n    }\n  },\n  onclickpreOnce:function(e){\n    var handler = this.props.customHandler;\n    var target = e.target;\n    if(handler){\n      handler({\n        eventType:'onclickpreOnce'\n        \n      })\n    }\n  },\n  onClicknextOnce:function(e){\n    var handler = this.props.customHandler;\n    var target = e.target;\n    if(handler){\n      handler({\n        eventType:'onClicknextOnce',\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData;\n    if(!data){\n      return (\n        <div>\n        \t\n        </div>\n      )\n    }\n    var str = '<',kr = '|<',\n        _this = this;\n    var lis = data.map(function(ele,index){\n      return(\n        <li data-id={index} onClick={_this.onClick} className={ele.flag}>{ele.text}</li>\n      )\n    })\n    return (\n      <div className='footerbtn'>\n        <ul>\n          <span>\n            <li data-id='prevPage' data-index={0} onClick={_this.onclickpage.bind(_this)}\n              className='ysp-prePage'>\n              {kr}\n            </li>\n            <li data-id='prev' onClick={_this.onclickpreOnce.bind(_this)}\n              className='ysp-preOnce'>\n              {str}\n            </li>\n          </span>\n          \n          <span className='ysp-pageBtnScroll-tt'><span>{lis}</span></span>\n          <span>\n            <li data-id='next' onClick={_this.onClicknextOnce.bind(_this)} \n              className='ysp-nextOne'>\n              >\n            </li>\n            <li data-id='nextPage'\n              onClick={_this.onclickpage.bind(_this)} className='ysp-nextPage'>\n              >|\n            </li>\n          </span>\n        </ul>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return "";
    }
    if (elem) {
      var data = [];
      var nodes = elem.children;

      for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].textContent.trim() != '...' && nodes[i].textContent.trim() != '首页' && nodes[i].textContent.trim() != '末页' && nodes[i].textContent.trim() != '下一页' && nodes[i].textContent.trim() != '上一页') {
          data.push({
            text: nodes[i].textContent.trim(),
            flag: nodes[i].style.color == 'red' ? 'cpb' : ''
          });
        }
      }

      return data;
    }
  doAction: |
    if (data.eventType == 'click') {
      //点击某一页
      var index = parseInt(data.dataCustom);
      var nodes = elem.children;
      var a = [];

      for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].textContent.trim() != '...' && nodes[i].textContent.trim() != '首页' && nodes[i].textContent.trim() != '末页' && nodes[i].textContent.trim() != '下一页' && nodes[i].textContent.trim() != '上一页') {
          var el = nodes[i];
        }

        if (el && el.tagName == 'A' || el && el.style.color == 'red') {
          a.push(el);
        }
      }

      a && a[index].click();
    } else if (data.eventType == 'onclickpage') {
      //首页和末页
      var id = data.dataCustom[0];
      var len = elem.querySelectorAll("a").length;

      if (id == 'prevPage') {
        var target = elem.querySelectorAll('a')[0];
        target.click();
      } else if (id == 'nextPage') {
        var target = elem.querySelectorAll('a')[len - 1];
        target.click();
      }
    } else if (data.eventType == 'onClicknextOnce') {
      //下一页
      var trs = elem.querySelectorAll('a');
      var trsLen = trs.length;
      trs[trsLen - 2].click();
    } else if (data.eventType == 'onclickpreOnce') {
      //上一页
      var trs = elem.querySelectorAll('a')[1].click();
- name: 发起流程知会信息
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler;\n    if(handler){\n      handler({\n        eventType : 'click'\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    if(!data){\n      return '';\n    }\n    \n    return (\n      <div className='derstanding'>\n        <div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='Content'>\n        \t<div>{data.left}</div>\n          <div>{data.right}</div>\n          <div><button onClick={_this.onClick.bind(_this)}>添加知会人</button></div>\n        </div>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {};
    data.left = elem.querySelector('label').textContent.trim().split('：')[0];
    data.title = '知会信息';
    data.right = elem.querySelector('input[type="text"]').value;
    return data;
  doAction: |
    if (data.eventType == 'click') {
      elem.querySelector('a').click();
    }
- name: 发起流程请假基本信息
  getTemplate: "module.exports = React.createClass({\n  onchange:function(e){\n    var handler = this.props.customHandler;\n    var target = e.target;\n    if(handler){\n      handler({\n        eventType:'iptchange',\n        data:{\n          value:target.value,\n          id:target.id\n        }\n      })\n    }\n  },\n  onclick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    if(handler){\n      handler({\n        eventType:'aclick',\n        data:{\n          data_id:target.getAttribute('data-id')\n        }\n      })\n    }\n  },\n  click:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    if(handler){\n      handler({\n        eventType:'radiobtn',\n        data:{\n          id:target.id\n        }\n      })\n    }\n  },\n  change:function(e){\n    var handler = this.props.customHandler;\n    var target = e.target;\n    if(handler){\n      handler({\n        eventType:'selectchange',\n        data:{\n          index:target.selectedIndex,\n          id:target.id\n        }\n      })\n    }\n  },\n  blockclick:function(e){\n    var target = e.target;\n    target.style.display = 'none';\n  \ttarget.nextElementSibling.style.display = 'block';\n    target.previousElementSibling.style.display = 'block';\n  },\n  noneclick:function(e){\n    var target = e.target;\n    target.style.display = 'none';\n    target.previousElementSibling.style.display = 'block';\n    target.previousElementSibling.previousElementSibling.style.display = 'none';\n  },\n  render: function() {\n    var data = this.props.customData;\n    var _this = this;\n    var lis = data.content.map(function(ele,index){\n\t\t\tif(index<6){\n              //普通输入框\n      if(ele.type == 'input'){\n        return(\n        \t<div className='content'>\n          \t<div>{ele.left}</div>\n            <div><input readOnly={ele.readonly} onChange={_this.onchange} value={ele.text} id={ele.id} /></div>\n          </div>\n      \t)\n      }\n      //带选人的输入框\n      if(ele.type == 'ainput'){\n        return(\n        \t<div className='content'>\n          \t<div>{ele.left}</div>\n            <div><input type='text' readOnly={ele.readonly} value={ele.text} id={ele.id} /><a data-id={ele.hrefid} onClick={_this.onclick} href=\"javascript:;\"></a></div>\n          </div>\n        )\n      }\n      //单选\n      if(ele.type == 'radio'){\n        var btn = ele.text.map(function(d,i){\n          return(\n          \t<button onClick={_this.click} id={ele.id[i]} className={ele.checked[i]?'radiobtn':''}>{d}</button>\n          )\n        })\n        return(\n        \t<div className='content'>\n          \t<div>{ele.left}</div>\n            <div>{btn}</div>\n          </div>\n        )\n      }\n      //下拉框\n      if(ele.type == 'select'){\n        var opts = ele.opts.map(function(d,i){\n          return(<option selected={ele.selected[i]}>{d}</option>)\n        })\n        return(\n          <div className='content'>\n            <div>{ele.left}</div>\n            <div><select onChange={_this.change} id={ele.id}>{opts}</select></div>\n          </div>\n        )\n      }\n      }\n    })\n    var list = data.content.map(function(ele,index){\n      if(index>5){\n                      //普通输入框\n      if(ele.type == 'input'){\n        return(\n        \t<div className='content'>\n          \t<div>{ele.left}</div>\n            <div><input readOnly={ele.readonly} onChange={_this.onchange} value={ele.text} id={ele.id} /></div>\n          </div>\n      \t)\n      }\n      //带选人的输入框\n      if(ele.type == 'ainput'){\n        return(\n        \t<div className='content'>\n          \t<div>{ele.left}</div>\n            <div><input type='text' readOnly={ele.readonly} value={ele.text} id={ele.id} /><a data-id={ele.hrefid} onClick={_this.onclick} href=\"javascript:;\"></a></div>\n          </div>\n        )\n      }\n      //单选\n      if(ele.type == 'radio'){\n        var btn = ele.text.map(function(d,i){\n          return(\n          \t<button onClick={_this.click} id={ele.id[i]} className={ele.checked[i]?'radiobtn':''}>{d}</button>\n          )\n        })\n        return(\n        \t<div className='content'>\n          \t<div>{ele.left}</div>\n            <div>{btn}</div>\n          </div>\n        )\n      }\n      //下拉框\n      if(ele.type == 'select'){\n        var opts = ele.opts.map(function(d,i){\n          return(<option selected={ele.selected[i]}>{d}</option>)\n        })\n        return(\n          <div className='content'>\n            <div>{ele.left}</div>\n            <div><select onChange={_this.change} id={ele.id}>{opts}</select></div>\n          </div>\n        )\n      }\n        if(ele.type == 'textareaipt'){\n          return(\n          \t<div className='content textareaipt'>\n            \t<div><span>{ele.left}</span><span>{ele.lefttext}</span></div>\n              <div style={{'display':'block','border':'none'}}><textarea onChange={_this.textchange} value={ele.text} id={ele.id}></textarea>\n              <p>{ele.value}</p></div>\n            </div>\n          )\n        }\n      }\n    })\n    return (\n      <div className='leaveinforme'>\n        <div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='leave_Content'>\n        \t<div className='content_block'>{lis}</div>\n          <div className='content_none'>{list}</div>\n          <div className='previousblock' style={{'display':'block'}} onClick={_this.blockclick}>显示更多内容</div>\n          <div className='previousnone' style={{'display':'none'}} onClick={_this.noneclick}>收起更多内容</div>\n        </div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    data.title = '基本信息';

    data.content = [];

    var trs = elem.querySelectorAll('tr');

    for (var i = 0; i < trs.length; i++) {
      var tds = trs[i].querySelectorAll('td');

      for (var k = 0; k < tds.length; k++) {
        if (tds[k].textContent.trim() != '') {
          var obj = {}; //判断是否为input

          if (tds[k].querySelector('input')) {
            //判断是单选还是输入框
            if (!tds[k].querySelector('input[type="radio"]')) {
              //判断有没有选人的功能
              if (tds[k].querySelector('a')) {
                obj.hrefid = tds[k].querySelector('input').id;
                obj.type = 'ainput';
              } else {
                obj.type = 'input';
              }

              obj.readonly = tds[k].querySelector('input[type="text"]').readOnly;
              obj.id = tds[k].querySelector('input[type="text"]').id;
              obj.left = tds[k].querySelector('label').textContent.trim().split('*')[0];
              obj.text = tds[k].querySelector('input[type="text"]').value;
            } else {
              //单选
              obj.left = tds[k].querySelector('label').textContent.trim().split('*')[0];
              obj.type = 'radio';
              obj.text = [];
              obj.name = [];
              obj.id = [];
              obj.checked = [];
              var radios = tds[k].querySelectorAll('input[type="radio"]');

              for (var u = 0; u < radios.length; u++) {
                obj.name.push(radios[u].name);
                obj.text.push(radios[u].nextSibling.textContent.trim());
                obj.id.push(radios[u].id);
                obj.checked.push(radios[u].checked);
              }
            }
          } //判断是否有select


          if (tds[k].querySelector('select')) {
            obj.left = tds[k].querySelector('label').textContent.trim().split('*')[0];
            obj.type = 'select';
            obj.opts = [];
            obj.selected = [];
            obj.id = tds[k].querySelector('select').id;
            var opts = tds[k].querySelector('select').querySelectorAll('option');

            for (var j = 0; j < opts.length; j++) {
              obj.opts.push(opts[j].textContent.trim());
              obj.selected.push(opts[j].selected);
            }
          }

          data.content.push(obj);
        }
      }
    }

    var box = elem.parentElement.querySelector("#tb3");

    var str = {};

    str.left = box.querySelector('label').textContent.trim().split("*")[0];

    str.lefttext =
    box.querySelector('label').textContent.trim().split("*")[1].trim();

    str.value = box.nextElementSibling.textContent.trim();

    str.type = 'textareaipt';

    str.id = box.querySelector('textarea').id;

    str.text = box.querySelector('textarea').value;

    data.content.push(str);

    return data;
  doAction: |
    var type = data.eventType;
    var data = data.customData;
    if (type == 'iptchange') {
      elem.querySelector("#" + data.id).value = data.value;
    }
    if (type == 'aclick') {
      //   for (var i = 0; i < trs.length; i++) {
      //     var tds = trs[i].querySelectorAll('td');
      //     for (var k = 0; k < tds.length; k++) {
      //         if (tds[k].textContent.trim() != '') {
      //         }
      //     }
      //   }
      elem.querySelector("#" + data.data_id).parentElement.querySelector('a').click();
    }
    if (type == 'radiobtn') {
      elem.querySelector("#" + data.id).click();
    }
    if (type == 'selectchange') {
      elem.querySelector("#" + data.id).selectedIndex = data.index;
      elem.querySelector("#" + data.id).onchange();
    }
- name: 发起请假明细
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    var index = target.getAttribute('data-id');\n    if(handler){\n      handler({\n        eventType:'onclick',\n        data:{\n          index:index\n        }\n      })\n    }\n  },\n  onChange:function(e){\n    var handler = this.props.customHandler,\n        target = e.target,\n        value = target.value;\n    if(handler){\n      handler({\n        eventType:'onChange',\n        data:{\n          value:value,\n          id:target.id\n        }\n      })\n    }\n  },\n  click:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    if(handler){\n      handler({\n        eventType:'delclick',\n        data:{\n          id:target.id\n        }\n      })\n    }\n  },\n  dlsclick:function(e){\n    var target = e.target;\n    if(target.className=='display'){\n      target.parentElement.parentElement.nextElementSibling.style.display = 'none';\n      target.className = 'hide';\n    }else{\n      target.parentElement.parentElement.nextElementSibling.style.display = 'block';\n      target.className = 'display';\n    }\n  },\n  render: function() {\n    var data = this.props.customData;\n    var _this = this;\n    if(!data){\n      return '';\n    }\n    var lis = data.content.map(function(d,i){\n      return(\n      \t<div className='leave_content'>\n        \t<div className='content_title'>\n          \t<div>{'0'+(i+1)}</div>\n            <div>\n            \t<div>请假明细</div>\n              <span className='hide' onClick={_this.dlsclick}></span>\n            </div>\n          </div>\n          <div className='content_none'>\n            <div>\n              <div>{data.titles[0]}</div>\n              <div>\n              \t<input onChange={_this.onChange} type='date' id={d[0].id} />\n              </div>\n            </div>\n            <div>\n              <div>{data.titles[1]}</div>\n              <div>\n                <input onChange={_this.onChange} type='time' id={d[1].id} />\n              </div>\n            </div>\n            <div>\n            <div>{data.titles[2]}</div>\n              <div>\n                <input onChange={_this.onChange} type='date' id={d[2].id} />\n              </div>\n            </div>\n            <div><div>{data.titles[3]}</div><div><input onChange={_this.onChange} type='time' id={d[3].id} /></div></div>\n            <div><div>{data.titles[4]}</div><div><input type='text' id={d[4].id} value={d[4].text} /></div></div>\n            <div><div>{data.titles[5]}</div><div>{d[5].text}</div></div>\n            <div><div>{data.titles[6]}</div><div>{d[6].text}</div></div>\n            <div><button onClick={_this.click} id={d[7].id}>删除</button></div>\n          </div>\n        </div>\n      )\n    })\n    return (\n      <div className='leaveDeta'>\n        <div className='contenttitle'>\n          <span className='xia'></span>\n          <p>{data.title}\n            <div>\n              <button data-id='1' onClick={_this.onClick.bind(_this)}>验证</button>\n              <button data-id='0' onClick={_this.onClick.bind(_this)}>添加</button>\n            </div>\n          </p>\n        </div>\n        <div className='leave_box'>{lis}</div>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {};
    data.titles = [];
    data.content = [];
    data.title = '请假明细';
    var trs = elem.querySelectorAll('tr');
    var ths = elem.querySelectorAll('th');
    for (var i = 0; i < ths.length; i++) {
      data.titles.push(ths[i].textContent.trim().split("*")[0]);
    }
    for (var i = 2; i < trs.length; i++) {
      if (trs[i].querySelector('input')) {
        var arr = [];
        var tds = trs[i].querySelectorAll('td');

        for (var k = 0; k < tds.length; k++) {
          var obj = {};

          if (tds[k].querySelector('input[type="text"]')) {
            obj.id = tds[k].querySelector('input[type="text"]').id;
            obj.text = tds[k].querySelector('input[type="text"]').value;
          } else if (tds[k].querySelector('a')) {
            obj.text = tds[k].querySelector('a').textContent.trim();
            obj.id = tds[k].querySelector('a').id;
          } else if (tds[k].querySelector('select')) {
            obj.text = tds[k].querySelectorAll('select')[0].value + tds[k].querySelectorAll('select')[1].value + tds[k].querySelectorAll('span')[1].textContent.trim();
          } else {
            obj.text = tds[k].textContent.trim();
          }

          arr.push(obj);
        }

        data.content.push(arr);
      }
    }
    return data;
  doAction: |
    var type = data.eventType;
    var data = data.customData;
    if (type == 'onclick') {
      elem.querySelectorAll('button')[data.index].click();
    }
    if (type == 'onChange') {
      elem.querySelector("#" + data.id).value = data.value;
    }
    if (type == 'delclick') {
      elem.querySelector("#" + data.id).click();
    }
- name: 添加流程弹出table
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    if(handler){\n        handler({\n          eventType:'click',\n          data:{\n            index:target.getAttribute('data-id')\n          }\n        })\n      }\n  },\n  click:function(e){\n    var target = e.target;\n    if(target.className == 'display_none'){\n      target.className = 'display_block';\n      target.parentElement.parentElement.nextElementSibling.style.display = 'block';\n    }else{\n      target.className = 'display_none';\n      target.parentElement.parentElement.nextElementSibling.style.display = 'none';\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    if(!data){\n      return '';\n    }\n    var lis = data.content.map(function(d,i){\n      var content = d.map(function(ele,index){\n        if(index !=0){\n          return(\n          \t<div>\n              \t<div>{data.titles[index]}</div>\n                <div>{ele}</div>\n            </div>\n          )\n        }\n      })\n      return (\n      \t<div className='Content'>\n          <div className='Content_radio'><input data-id={i} onClick={_this.onClick} type='radio' name='rbMatNR' /></div>\n          <div className='Content_right'>\n            <div className='Content_title'>\n            \t<div><p>{d[0]}</p><span className='display_none' onClick={_this.click}></span></div>\n              <div><div>{data.titles[1]}</div><div>{d[1]}</div></div>\n              <div><div>{data.titles[2]}</div><div>{d[2]}</div></div>\n            </div>\n          \t<div className='Content_none' style={{'display':'none'}}>\n            \t<div><div>{data.titles[3]}</div><div>{d[3]}</div></div>\n            </div>\n          </div>\n      \t</div>\n      )\n    })\n    return (\n      <div className='Contenttable'>\n        {lis}\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    var data = ysp.customHelper.getTableData(elem, ['流程名称', '流程单号', '申请人',
    '流程摘要']);

    return data;
  doAction: |
    var type = data.eventType;
    var data = data.customData;
    if (type == 'click') {
      elem.querySelectorAll('tr')[++data.index].querySelector('input[type="radio"]').click();
    }
- name: 查询输入框
  getTemplate: "module.exports = React.createClass({\n  onChange:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    if(handler){\n      handler({\n        eventType:'change',\n        data:{\n          value:target.value\n        }\n      })\n    }\n  },\n  onclick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    if(handler){\n      handler({\n        eventType:'click'\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData\n    return (\n      <div className='ipt_sub'>\n        <div>\n        \t<input type='text' onChange={this.onChange} value={data} />\n          <button onClick={this.onclick}>查询</button>\n        </div>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    return elem.querySelector('input[type="text"]').value;
  doAction: |
    var type = data.eventType;
    var data = data.customData;
    if (type == 'click') {
      elem.querySelector('button').click();
    }
    if (type == 'change') {
      elem.querySelector('input[type="text"]').value = data.value;
    }
- name: 发起（关联流程）
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    if(handler){\n      handler({\n        eventType : 'click'\n      })\n    }\n  },\n  click:function(e){\n    var handler = this.props.customHandler;\n    var target = e.target;\n    if(handler){\n      handler({\n        eventType:'onclick',\n        data:{\n          index:target.getAttribute('data-id')\n        }\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData;\n    var _this = this;\n    var lis = data.content.map(function(ele,index){\n      var list = ele.map(function(d,i){\n        if(i==0){\n          return(\n          \t<div className='titlediv'>\n            \t<div><p>{'0'+(index+1)}</p></div>\n              <div>{d}</div>\n            </div>\n          )\n        } else if(i == ele.length-1){\n            return(\n            <div>\n              <div data-id={index} onClick={_this.click.bind(_this)} className='contentitem'>删除</div>\n            </div>\n          )\n        }else{\n        return(\n        \t<div>\n          \t<div className='contentitem'>{data.titles[i]}</div>\n            <div className='contentitem'>{d}</div>\n          </div>\n        )\n        }\n      })\n      return(\n      \t<div className='contentit'>{list}</div>\n      )\n    })\n    return (\n      <div className='relation'>\n        <div className='contenttitle'><span></span><p><div>{data.title}</div><button onClick={this.onClick}>添加关联流程</button></p></div>\n        <div className='content'>\n    \t\t\t{lis}    \t\n        </div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    data.title = '关联流程';

    data.titles = [];

    data.content = [];

    var ths =
    elem.querySelector('thead').querySelector('tr').querySelectorAll('th');

    for (var i = 0; i < ths.length; i++) {
      if (i < ths.length) {
        data.titles.push(ths[i].textContent.trim());
      }
    }

    var trs = elem.querySelector('tbody').querySelectorAll('tr');

    for (var i = 0; i < trs.length; i++) {
      var arr = [];
      var tds = trs[i].querySelectorAll('td');

      for (var k = 0; k < data.titles.length; k++) {
        arr.push(tds[k].textContent.trim());
      }

      data.content.push(arr);
    }

    return data;
  doAction: |
    if (data.eventType == 'click') {
      elem.nextElementSibling.nextElementSibling.click();
    }
    if (data.eventType == 'onclick') {
      var tr = elem.querySelector('tbody').querySelectorAll('tr')[data.customData.index];
      tr.querySelectorAll('td')[tr.querySelectorAll('td').length - 1].querySelector('a').click();
    }
- name: 返回页面顶部
  getTemplate: "import {Component} from \"react\";\nexport default class extends Component{\n \n  componentDidMount(){\n    \n    var elem=this.refs.toTop.ownerDocument.querySelector(\".view-wrapper\");\n    \n    setTimeout(function(){\n      elem.scrollTop=0;\n    },500)\n  }\n  render(){\n    return(\n    \t<div ref=\"toTop\"></div>\n    )\n  }\n}"
  getData: ''
  doAction: ''
- name: 加签操作
  getTemplate: "module.exports = React.createClass({\n  click:function(){\n    var handler = this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'click'\n      })\n    }\n  },\n  onClick:function(e){\n    var handler = this.props.customHandler,\n        target=e.target;\n    if(handler){\n      handler({\n        eventType:'onclick',\n        data:{\n          value:target.parentElement.previousElementSibling.querySelector('input').value\n        }\n      })\n    }\n  },\n  btnclick:function(){\n    var handler = this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'btnclick'\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData;\n    return (\n      <div className='addlots'>\n        \t\t<div className='addtop'>{data.title}</div>\n            <div className='addname'>\n            <div>{data.ipt.text}</div>\n            <div>\n              <input value={data.ipt.iptvalue} id={data.ipt.id} readOnly={data.ipt.readonly} ></input><a href=\"javascript:;\" onClick={this.btnclick} ></a>\n            </div>\n          </div>\n          <div className='addcommit'>\n            <button onClick={this.click}>{data.commitbtn[0]}</button>\n            <button onClick={this.onClick}>{data.commitbtn[1]}</button>\n        \t</div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    data.title = elem.querySelector('div.top').textContent.trim();

    data.commitbtn = [];

    data.commitbtn.push('取消');

    data.commitbtn.push('确定'); // defaultView.frameElement

    data.ipt = {};

    data.ipt.text =
    elem.querySelector('table').textContent.trim().split('：')[0];

    data.ipt.iptvalue = elem.querySelector("input[type='text']").value;

    data.ipt.readonly = elem.querySelector("input[type='text']").readOnly;

    data.ipt.id = elem.querySelector("input[type='text']").id;

    return data;
  doAction: |
    var type = data.eventType;
    var data = data.customData;
    if (type == 'click') {
      elem.ownerDocument.defaultView.frameElement.parentElement.parentElement.parentElement.previousElementSibling.querySelector('a').click();
    }
    if (type == 'onclick') {
      elem.querySelector("input[type='submit']").click();

      if (data.value) {
        setTimeout(function () {
          alert('加签成功');
        }, 1000);
      }
    }
    if (type == 'btnclick') {
      elem.querySelector('table').querySelector('a').click();
    }
- name: 附件（无上传文件）
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target,\n        type = '',\n        data = '';\n    if(target.tagName.toLowerCase() == 'button'){\n      console.log(target.id);\n      if(target.id == 'uploadDiv' ){\n        type = 'commit';\n        data = 'btnFileUpload';\n      }else{\n        type = 'add';\n        data = 'btnFileUpload';\n      }\n    }\n    if(target.tagName.toLowerCase() == 'p'){\n      type = 'updel';\n      data = {\n        index:target.getAttribute('data-index'),\n        i:target.className=='xiazai'?0:1\n      }\n    }\n    if(handler){\n      handler({\n        eventType:type,\n        data:data\n      })\n    }\n  },\n  click:function(e){\n    var target = e.target;\n    if(target.className == 'shang'){\n      target.className = 'xia';\n      var divs = target.parentElement.parentElement.querySelectorAll('div.displnone');\n      for(var i=0;i<divs.length;i++){\n        divs[i].className = 'displblock';\n      }\n    }else{\n      target.className = 'shang';\n      var divs = target.parentElement.parentElement.querySelectorAll('div.displblock');\n      for(var i=0;i<divs.length;i++){\n        divs[i].className = 'displnone';\n      }\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    var lis = data.content.map(function(ele,index){\n      var list = ele.map(function(d,i){\n        if(i==0){\n          return(\n          \t<div className='titlediv'>\n            \t<div>{'0'+(index+1)}</div>\n              <div>{d}</div>\n              <div onClick={_this.click} className='shang'></div>\n            </div>\n          )\n        }\n        if(i == ele.length-1){\n          if(d.length>2){\n              return(\n              <div className='displnone'>\n                <div className='contentitem contentspan' style={{'width':'100%','text-align-last':'auto','text-align':'center'}}><p className='shanchu' data-index={index} onClick={_this.onClick.bind(_this)}><span></span>{d[2]+d[3]}</p><p data-index={index} className='xiazai' onClick={_this.onClick.bind(_this)}><span></span>{d.length>2?d[0]+d[1]:''}</p></div>\n              </div>\n            )\n          }else{\n             return(\n              <div className='displnone'>\n                <div className='contentitem'><p className='xiazai' data-index={index} onClick={_this.onClick.bind(_this)}><span></span>{d[0]+d[1]}</p></div>\n              </div>\n            )\n          }\n        }\n        return(\n        \t<div className='displnone'>\n          \t<div className='contentitem'>{data.titles[i]}</div>\n            <div className='contentitem'>{d}</div>\n          </div>\n        )\n      })\n      return(\n      \t<div className='contentit'>{list}</div>\n      )\n    })\n    \n            // <div>\n            //   <button onClick={_this.onClick.bind(_this)}>选择文件</button>\n            //   <button id={data.id} onClick={_this.onClick.bind(_this)}>上传文件</button>\n            // </div>\n    return (\n      <div className='Enclosure'>\n        <div className='contenttitle'>\n          <span className='xia'></span>\n          <p>{data.title}\n          </p>\n        </div>\n        <div className='content'>\n    \t\t\t{lis}\n        </div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = ysp.customHelper.getTabledata(elem, ['文件名', '上传人', '上传时间', '版本',
    '操作']);

    data.id = elem.nextElementSibling.nextElementSibling.id;

    data.title = '附件';

    return data;
  doAction: |
    var type = data.eventType;
    var data = data.customData;
    if (type == 'commit') {
      // debugger;
      elem.ownerDocument.querySelector("#" + data).click();
      setTimeout(function () {
        elem.ownerDocument.defaultView.InitAttachmentList();
      }, 1000); // setTimeout(function () {
      //   var url = ysp.appMain.getActiveUrl();
      //   ysp.appMain.reloadPage(url);
      // }, 2000);
    }
    if (type == 'add') {
      elem.ownerDocument.querySelector("#" + data).previousElementSibling.querySelector('input').click();
    }
    if (type == 'updel') {
      var tds = elem.querySelectorAll('tbody')[1].querySelectorAll('tr')[data.index].querySelectorAll('td');
      tds[tds.length - 1].querySelectorAll('a')[data.i].click();
    }
- name: 按钮修改
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target,\n        type = '',\n        data;\n    if(target.tagName.toLowerCase() == 'div'){\n      target.parentElement.nextElementSibling.style.display = 'block';\n      // target.parentElement.nextElementSibling.style.height = target.ownerDocument.style.height;\n      var lis = target.parentElement.parentElement.querySelector('.dianbl').querySelectorAll('li');\n      for(var i=0;i<lis.length;i++){\n        lis[i].style.bottom = i*50 +'px';\n      }\n    }\n    if(target.tagName.toLowerCase() == 'p'){\n      target.parentElement.parentElement.parentElement.style.display = 'none';\n    }\n    if(target.tagName.toLowerCase() == 'button'){\n      type = 'click';\n      data = target.getAttribute('data-id');\n    }\n    if(handler){\n      handler({\n        eventType:type,\n        data:data\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData;\n    var _this = this;\n    if(!data){\n      return '';\n    }\n  \tvar lis = data.map(function(d,i){\n        return(\n        \t<button data-id={i} onClick={_this.onClick}>{d}</button>\n        )\n      \n    })\n    var list = data.map(function(d,i){\n      // if(i>2){\n      //   return(\n      //   \t<li><button data-id={i} onClick={_this.onClick}>{d}</button></li>\n      //   )\n      // }\n    })\n        //<div className='dianbl'><ul><li><p onClick={_this.onClick}>取消</p></li>{list}</ul></div><div style={{'display':data.length>3?'block':\"none\"}} onClick={_this.onClick.bind(_this)}></div>\n    return (\n      <div className='submit'>\n        <div className='subtrue'><div className={data.length==1?'btnlength01':(data.length==2?'btnlength02':'btnlength03')}>{lis}</div></div>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = [];
    var arr = ['同意', '拒绝', '加签', '建议'];
    var lis = elem.querySelectorAll('li');
    for (var i = 0; i < lis.length; i++) {
      if (arr.indexOf(lis[i].textContent.trim()) != -1) {
        data.push(lis[i].textContent.trim());
      }
    }
    return data;
  doAction: |
    var type = data.eventType;
    var data = data.customData;
    if (type == 'click') {
      elem.querySelectorAll('li')[data].querySelector('a').click();
    }
- name: 列表详情修改
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target,\n        type,data={};\n    //点击事件   点击进入详情页\n    // if(target.tagName.toLowerCase() == 'div'){\n      type='td_click';\n      var Contentele = ysp.customHelper.getparent(target,'Content');\n      data.id = Contentele.getAttribute('data-id');\n      data.text = Contentele.querySelectorAll('div.Content_item')[0].textContent.trim();\n    // }\n    \n    \n    if(handler){\n      handler({\n        eventType:type,\n        data:data\n      })\n    }\n  },\n  onclick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    //判断是否为下啦按钮   改变隐藏的元素display\n    if(target.getAttribute('data-id') == 'true'){\n      // target = (target.tagName.toLowerCase() == 'span')? target.parentElement:target;\n      target.setAttribute('data-id','false');\n      target.className = 'disbottom';\n      target.parentElement.parentElement.querySelector('div.Content_disnone').style.display = 'block';\n    }else{\n      target.setAttribute('data-id','true');\n      target.className = 'distop';\n      target.parentElement.parentElement.querySelector('div.Content_disnone').style.display = 'none';\n    }\n    //阻止事件冒泡从而执行父元素的点击事件\n    e.stopPropagation()\n    // if(handler){\n    //   handler({\n    //     type:'tag',\n    //     data:target.getAttribute('data-id')\n    //   })\n    // }\n  },\n  render: function() {\n    var data = this.props.customData,\n    \t\t_this = this;\n    if(!data){\n      return '';\n    }\n    var lis = data.content.map(function(ele,index){\n      return(\n      \t<div className='Content' onClick={_this.onClick} data-id={data.index[index]}>\n        \t<div>\n          \t<div className='Content_item'>\n            {ele[0]}</div>\n          <div className='Content_item' onClick={_this.onClick}><p onClick={_this.onClick}>{data.titles[3]}</p><p onClick={_this.onClick}>{ele[3]}</p></div>\n          <div className='Content_item'>\n            <p>{data.titles[2]}</p><p>{ele[2]}</p>\n          </div>\n          <div className='Content_item'>\n            \t<p>{data.titles[4]}</p><p>{ele[4]}</p>\n            </div>\n            <div className='Content_item'>\n            \t<p>{data.titles[5]}</p><p>{ele[5]}</p>\n            </div>\n\t\t\t\t\t</div>\n        </div>\n      )\n          //             <a className='distop' href='javascript:;' data-id='true' onClick={_this.onclick} ><span></span></a>\n          // </div>\n          // <div data-id={index} className='Content_disnone'>\n          //       \t<div id='summary'>\n          //   \t<div>{data.titles[1]}</div>\n          //     <div>{ele[1]}</div>\n          //   </div>\n          //   <div>\n          //   \t<div>{data.titles[4]}</div>\n          //     <div>{ele[4]}</div>\n          //   </div>\n          //   <div>\n          //   \t<div>{data.titles[5]}</div>\n          //     <div>{ele[5]}</div>\n          //   </div>\n          // </div>\n\n    })\n    return (\n      <div>\n        {lis}\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var content = ysp.customHelper.getTableData(elem, ['流程名称', '流程编号', '内容摘要',
    '申请人', '停留时间', '申请日期']);

    var arr = ['要事追踪申请单'];

    var data = ysp.customHelper.getDatamove(content, arr);

    content.content = data.data;

    content.index = data.index;

    return content;
  doAction: |
    var type = data.eventType,
        data = data.customData;
    if (type == 'td_click') {
      var arr = ['请假申请单', '销假申请单', '离职申请单', '加班申请单', '因公外出申请单', '考勤异常申请单', '员工异动申请单', '员工异动申请单V2', '招聘申请单', '员工合同续签申请单', '试用期转正申请单', '录用入职申请单', '培训申请单', '人才盘点信息表', '资产预算调整流程', '资产预算调整流程V2', '信用冻结订单释放申请流程', '资产类预算外申请流程V2', '借款/预付款申请单', '资产处理申请单', '差旅费用报销流程', '费用报销流程', '路线新增流程', '路线变更流程', '路线组变更申请', '客资/送大方/销售人员.路线批量审批', '市场用品采购流程', '总部合同审批流程', '用印申请流程', '合同审批流程', '客资批量审批', '送达方批量审批', '路线批量审批']; // debugger;

      var flat = arr.indexOf(data.text);

      if (flat == -1) {
        // ysp.appMain.openWindow('http://172.16.11.61:8000/Forms/Common/TY/Processing.aspx?SN=9532480E5364DF3BC577107FF40AC672&Guid=81c96722-bf68-45a8-8106-608995104db1&_ysp_forcepc=1');
        var hreflo = '';
        hreflo += elem.querySelectorAll('tr')[++data.id].querySelector('a').onclick.toString().split("ShowPage('")[1].split("')")[0];

        if (hreflo[0] == 'h') {
          hreflo += "&_ysp_forcepc=1";
          ysp.appMain.openWindow(hreflo);
        } else {
          hreflo = "http://172.16.11.61:8000:" + hreflo; // hreflo += elem.querySelectorAll('tr')[++data.id].querySelector('a').onclick.toString().split("ShowPage('")[1].split("')")[0];

          hreflo += "&_ysp_forcepc=1";
          ysp.appMain.openWindow(hreflo);
        }
      } else {
        elem.querySelectorAll('tr')[++data.id].querySelector('a').click();
      } // for (var i = 0; i < arr.length; i++) {
      //   if (arr[i] == data.text) {
      //     elem.querySelectorAll('tr')[data.id].querySelector('a').click();
      //   } else {
      //     window.location.href = 'http://172.16.11.61:8000/Forms/LA/HT/Processing.aspx?SN=9B1052B656E8EB71EED60E34F49F1CF2&Guid=bd7ac34d-574c-41a7-a64f-5bfa1488fbd3&_ysp_forcepc=1';
      //   }
      // }

    }
    return false;
- name: 附件修改（只下载）
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target,\n        type = '',\n        data = '';\n    if(target.tagName.toLowerCase() == 'button'){\n      // console.log(target.id);\n      if(target.id == 'uploadDiv' ){\n        type = 'commit';\n        data = 'btnFileUpload';\n      }else{\n        type = 'add';\n        data = 'btnFileUpload';\n      }\n    }\n    if(target.tagName.toLowerCase() == 'p'){\n      type = 'updel';\n      data = {\n        index:target.getAttribute('data-index'),\n        i:target.className=='xiazai'?0:1\n      }\n    }\n    if(handler){\n      handler({\n        eventType:type,\n        data:data\n      })\n    }\n  },\n  click:function(e){\n    var target = e.target;\n    if(target.className == 'shang'){\n      target.className = 'xia';\n      var divs = target.parentElement.parentElement.querySelectorAll('div.displnone');\n      for(var i=0;i<divs.length;i++){\n        divs[i].className = 'displblock';\n      }\n    }else{\n      target.className = 'shang';\n      var divs = target.parentElement.parentElement.querySelectorAll('div.displblock');\n      for(var i=0;i<divs.length;i++){\n        divs[i].className = 'displnone';\n      }\n    }\n  },\n  loadclick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    if(handler){\n      handler({\n        eventType:'loadbtn',\n        data:{\n          index:target.getAttribute('data-id')\n        }\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    if(!data){\n      return '';\n    }\n    // var lis = data.content.map(function(ele,index){\n    //   var list = ele.map(function(d,i){\n    //     if(i==0){\n    //       return(\n    //       \t<div className='titlediv'>\n    //         \t<div>{'0'+(index+1)}</div>\n    //           <div>{d}</div>\n    //           <div onClick={_this.click} className='shang'></div>\n    //         </div>\n    //       )\n    //     }\n    //     if(i == ele.length-1){\n    //       if(d.length>2){\n    //           return(\n    //           <div className='displnone'>\n    //             <div className='contentitem contentspan' style={{'width':'100%','text-align-last':'auto','text-align':'center'}}><p className='shanchu' data-index={index} onClick={_this.onClick.bind(_this)}><span></span>{d[2]+d[3]}</p><p data-index={index} className='xiazai' onClick={_this.onClick.bind(_this)}><span></span>{d.length>2?d[0]+d[1]:''}</p></div>\n    //           </div>\n    //         )\n    //       }else{\n    //          return(\n    //           <div className='displnone'>\n    //             <div className='contentitem'><p className='xiazai' data-index={index} onClick={_this.onClick.bind(_this)}><span></span>{d[0]+d[1]}</p></div>\n    //           </div>\n    //         )\n    //       }\n    //     }\n    //     return(\n    //     \t<div className='displnone'>\n    //       \t<div className='contentitem'>{data.titles[i]}</div>\n    //         <div className='contentitem'>{d}</div>\n    //       </div>\n    //     )\n    //   })\n    //   return(\n    //   \t<div className='contentit'>{list}</div>\n    //   )\n    // })\n    \n            // <div>\n            //   <button onClick={_this.onClick.bind(_this)}>选择文件</button>\n            //   <button id={data.id} onClick={_this.onClick.bind(_this)}>上传文件</button>\n            // </div>\n    var lis = data.content.map(function(ele,index){\n      return(\n      \t<div className='Encltitle'>\n        \t<div>{ele[0]}</div>\n          <div><button data-id={index} onClick={_this.loadclick.bind(_this)}>下载</button></div>\n        </div>\n      )\n    })\n    return (\n      <div className='Enclosure'>\n        <div className='contenttitle'>\n          <span className='xia'></span>\n          <p>{data.title}\n          </p>\n        </div>\n        <div className='content'>\n    \t\t\t{lis}\n        </div>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    } // var data = ysp.customHelper.getTabledata(elem, ['文件名', '操作']);
    var data = ysp.customHelper.getTabledata(elem, ['文件名']);
    data.id = elem.nextElementSibling.nextElementSibling.id;
    data.title = '附件';
    return data;
  doAction: |
    var type = data.eventType;
    var data = data.customData;
    if (type == 'commit') {
      // debugger;
      elem.ownerDocument.querySelector("#" + data).click();
      setTimeout(function () {
        elem.ownerDocument.defaultView.InitAttachmentList();
      }, 1000); // setTimeout(function () {
      //   var url = ysp.appMain.getActiveUrl();
      //   ysp.appMain.reloadPage(url);
      // }, 2000);
    }
    if (type == 'add') {
      elem.ownerDocument.querySelector("#" + data).previousElementSibling.querySelector('input').click();
    }
    if (type == 'updel') {
      var tds = elem.querySelectorAll('tbody')[1].querySelectorAll('tr')[data.index].querySelectorAll('td');
      tds[tds.length - 1].querySelectorAll('a')[data.i].click();
    } //附件下载
    if (type == 'loadbtn') {
      var tds = elem.querySelectorAll('tbody')[1].querySelectorAll('tr')[data.index].querySelectorAll('td');
      tds[tds.length - 1].querySelectorAll('a')[0].click();
    }
- name: 审批操作修改
  getTemplate: "module.exports = React.createClass({\n  onChange:function(e){\n    var handler = this.props.customHandler,\n        target = e.target,\n        value = target.value;\n    if(value.length>=400){\n      value = value.substring(0,400);\n    }\n    if(handler){\n      handler({\n        eventType:'change',\n        data:value\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    return (\n      <div className='approval'>\n        <div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='content'>\n          \t<div className='contentitem'>{data.content[0].left}</div>\n          \t<div className='contentitem'>{data.content[0].right}</div>\n          </div>\n          <div className='content'>\n          \t<div className='contentitem'>{data.content[1].left}</div>\n            <textarea value={data.content[1].right} onChange={_this.onChange}></textarea>\n        \t</div>\n        <div className='tishi'>{data.content[2].left}</div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    data.title = '审批操作';

    data.content = [];

    var trs = elem.querySelectorAll('tr');

    var obj = {};

    var str = trs[0].querySelectorAll('td')[0].textContent.trim();

    var arr = str.split(":");

    obj.left =
    trs[0].querySelectorAll('td')[0].textContent.trim().split('：')[0]; //
    obj.left = arr;

    obj.right = trs[0].querySelectorAll('td')[1].textContent.trim();

    data.content.push(obj);

    var obj = {};

    obj.left =
    trs[1].querySelectorAll('td')[0].textContent.trim().split('：')[0];

    obj.right =
    trs[1].querySelectorAll('td')[1].querySelector('textarea').value;

    data.content.push(obj);

    data.content.push({
      left: trs[1].querySelectorAll('td')[1].querySelector('p').textContent.trim()
    });

    return data;
  doAction: |
    var type = data.eventType;
    var data = data.customData;
    if (type == 'change') {
      elem.querySelector('textarea').value = data;
    }
- name: 首页数据更多
  getTemplate: "import {Component} from 'react'; \nimport {CustomHeader} from 'ysp-custom-components';\nexport default class extends Component{\n   constructor(props){\n   \t super(props);\n  }\n  handlerClick(e){\n    var target = e.target;\n    var index = target.dataset.index;\n    var handler = this.props.customHandler;\n    if(handler){\n      handler({\n        data:{\n          index: index\n        },\n        eventType: 'click'\n      })\n    }\n  }\n  render = () => {\n    var _this = this;\n    var data = this.props.customData;\n    var title = this.props.customData && this.props.customData.title  || [];\n    var date = this.props.customData && this.props.customData.date || [];\n    var flag = this.props.customData && this.props.customData.flag || [];\n    var _this = this;\n    return (\n      <div className=\"ysp-flash-more\">\n        {\n          title.map((items,index)=>{\n            return(\n            \t<div className=\"ysp-flash-more-content\"  onClick={_this.handlerClick.bind(_this)}\n                data-index={index}>\n                <div onClick={_this.handlerClick.bind(_this)}  data-index={index} \n                  className={flag[index][0] == null ? \"\" : \"ysp-flash-text-color\"}>\n                  {items}\n                </div>\n                <div onClick={_this.handlerClick.bind(_this)}  data-index={index}>\n                  {date[index]}\n                </div>\n              </div>\n            );\n          })\n        }\n      </div>\n    )\n   }\n}"
  getData: |
    if (!elem) {
      return;
    }
    var data = {
      title: [],
      date: [],
      flag: []
    };
    var uls = elem.querySelector("ul");
    var lis = uls && uls.querySelectorAll("li");
    for (var i = 0; i < lis.length; i++) {
      var a = [];
      var b = [];
      var c = [];
      var title = lis[i].querySelector(".title").textContent.trim();
      var dates = lis[i].querySelector(".time").textContent.trim();
      var date = dates && dates.substr(0, 10);
      var flags = lis[i].querySelector(".title").querySelector("a").getAttribute("class");
      a.push(title);
      b.push(date);
      c.push(flags);
      data.title.push(a);
      data.date.push(b);
      data.flag.push(c);
    }
    return data;
  doAction: |
    if ('click' == data.eventType) {
      var index = data.customData.index;
      var uls = elem.querySelector("ul");
      uls && uls.querySelectorAll("li")[index].querySelector('a').click();
    }
- name: 首页更多翻页功能
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler;\n    var target = e.target;\n    if(handler){\n      handler({\n        eventType:'click',\n        data:target.getAttribute('data-id')\n      })\n    }\n  },\n  onclickpage:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'onclickpage',\n        data:[target.dataset.id]\n      })\n    }\n  },\n  onclickpreOnce:function(e){\n    var handler = this.props.customHandler;\n    var target = e.target;\n    if(handler){\n      handler({\n        eventType:'onclickpreOnce'\n        \n      })\n    }\n  },\n  onClicknextOnce:function(e){\n    var handler = this.props.customHandler;\n    var target = e.target;\n    if(handler){\n      handler({\n        eventType:'onClicknextOnce',\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData;\n    if(!data){\n      return (\n        <div>\n        \t\n        </div>\n      )\n    }\n    var str = '<',kr = '|<',\n        _this = this;\n    var lis = data.map(function(ele,index){\n      return(\n        <li data-id={index} onClick={_this.onClick} className={ele.flag}>{ele.text}</li>\n      )\n    })\n    return (\n      <div className='footerbtn'>\n        <ul>\n          <span>\n            <li data-id='prevPage' data-index={0} onClick={_this.onclickpage.bind(_this)}\n              className='ysp-prePage'>\n              {kr}\n            </li>\n            <li data-id='prev' onClick={_this.onclickpreOnce.bind(_this)}\n              className='ysp-preOnce'>\n              {str}\n            </li>\n          </span>\n          \n          <span className='ysp-pageBtnScroll-tt'><span>{lis}</span></span>\n          <span>\n            <li data-id='next' onClick={_this.onClicknextOnce.bind(_this)} \n              className='ysp-nextOne'>\n              >\n            </li>\n            <li data-id='nextPage'\n              onClick={_this.onclickpage.bind(_this)} className='ysp-nextPage'>\n              >|\n            </li>\n          </span>\n        </ul>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return "";
    }
    if (elem) {
      var data = [];
      var nodes = elem.children;

      for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].textContent.trim() != '...' && nodes[i].textContent.trim() != '首页' && nodes[i].textContent.trim() != '末页' && nodes[i].textContent.trim() != '下一页' && nodes[i].textContent.trim() != '上一页') {
          data.push({
            text: nodes[i].textContent.trim(),
            flag: nodes[i].style.color == 'red' ? 'cpb' : ''
          });
        }
      }

      return data;
    }
  doAction: |
    if (data.eventType == 'click') {
      //点击某一页
      var index = parseInt(data.dataCustom);
      var nodes = elem.children;
      var a = [];

      for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].textContent.trim() != '...' && nodes[i].textContent.trim() != '首页' && nodes[i].textContent.trim() != '末页' && nodes[i].textContent.trim() != '下一页' && nodes[i].textContent.trim() != '上一页') {
          var el = nodes[i];
        }

        if (el && el.tagName == 'A' || el && el.style.color == 'red') {
          a.push(el);
        }
      }

      a && a[index].click();
    } else if (data.eventType == 'onclickpage') {
      //首页和末页
      var id = data.dataCustom[0];
      var len = elem.querySelectorAll("a").length;

      if (id == 'prevPage') {
        var target = elem.querySelectorAll('a')[0];
        target.click();
      } else if (id == 'nextPage') {
        var target = elem.querySelectorAll('a')[len - 1];
        target.click();
      }
    } else if (data.eventType == 'onClicknextOnce') {
      //下一页
      var trs = elem.querySelectorAll('a');
      var trsLen = trs.length;
      trs[trsLen - 2].click();
    } else if (data.eventType == 'onclickpreOnce') {
      //上一页
      var trs = elem.querySelectorAll('a')[1].click();
    }
- name: 快讯、公告、党群工作等详情页 翻页功能
  getTemplate: |-
    module.exports = React.createClass({
      onClick:function(e){
        var handler = this.props.customHandler,
            target = e.target,type,data;
        if(target.className == 'next'){
          type = 'nextclick';
        }else{
          type = 'prevclick'
        }
        if(handler){
          handler({
            eventType:type
          })
        }
      },
      render: function() {
        return (
          <div className='next_prev'>
            <button className='prev' onClick={this.onClick}>上一篇</button>
            <button className='next' onClick={this.onClick}>下一篇</button>
          </div>
        )
      }
    });
  getData: ''
  doAction: |
    var type = data.eventType;
    var spans = elem.querySelectorAll('span');
    if (type == 'nextclick') {
      if (spans[3].querySelector('a')) {
        spans[3].querySelector('a').click();
      } else {
        alert('已经是最后一篇了');
      }
    }
    if (type == 'prevclick') {
      if (spans[1].querySelector('a')) {
        spans[1].querySelector('a').click();
      } else {
        alert('已经是第一篇了');
      }
    }
- name: 快讯、公告、党群工作等详情页面
  getTemplate: "module.exports = React.createClass({\n  render: function() {\n    var data = this.props.customData;\n    var lis = data.texts.map(function(ele,index){\n      var list = data.imgs.map(function(d,i){\n        if(i==index){\n          return(\n      \t<div className='textimg'>\n        \t<p>{ele}</p>\n          <div><img src={data.imgs[index].src} alt={data.imgs[index].alt} /></div>\n        </div>\n      )\n        }\n      })\n      if(data.imgs[index]){\n        return (<div className='Content_deil'>{list}</div>)\n      }else{\n        return(<div className='Content_deil'><p>{ele}</p></div>)\n      }\n    })\n    return (\n      <div className='detail_new'>\n        <div className='deil_title'>\n        \t<h2>{data.title}</h2>\n          <p>{data.titleinfo}</p>\n        </div>\n        {lis}\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    data.title = elem.firstElementChild.textContent.trim();

    data.titleinfo =
    elem.firstElementChild.nextElementSibling.textContent.trim();

    data.imgs = [];

    data.texts = [];

    var textimgs = elem.querySelectorAll('div')[0].children;

    for (var i = 0; i < textimgs.length; i++) {
      if (textimgs[i].textContent.trim()) {
        data.texts.push(textimgs[i].textContent.trim());
      }
    }

    var imgs = elem.querySelectorAll('img[src]');

    for (var i = 0; i < imgs.length; i++) {
      data.imgs.push({
        src: imgs[i].src,
        alt: imgs[i].alt
      });
    }

    return data;
  doAction: ''
- name: 党群工作单个模块
  getTemplate: "import {Component} from 'react'; \nimport {CustomHeader} from 'ysp-custom-components';\nexport default class extends Component{\n   constructor(props){\n   \t super(props);\n  }\n  handlerClick(e){\n    var target = e.target;\n    var index = target.dataset.index;\n    var handler = this.props.customHandler;\n    if(handler){\n      handler({\n        data:{\n          index: index\n        },\n        eventType: 'click'\n      })\n    }\n  }\n  moreClick(e){\n    var handler = this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'moreClick'\n      })\n    }\n  }\n  render = () => {\n    var _this = this;\n    var data = this.props.customData;\n    var title = this.props.customData && this.props.customData.title  || [];\n    var date = this.props.customData && this.props.customData.date || [];\n    var flag = this.props.customData && this.props.customData.flag || [];\n    var _this = this;\n    return (\n      <div className=\"ysp-party-work-more\">\n        <div className=\"ysp-party-work-hard\">\n          <span>工作动态</span>\n          <span onClick={this.moreClick.bind(this)}>更多</span>\n        </div>\n        {\n          title.map((items,index)=>{\n            return(\n            \t<div className=\"ysp-party-work-more-content\" onClick={_this.handlerClick.bind(_this)}\n                data-index={index}>\n                <div onClick={_this.handlerClick.bind(_this)}  data-index={index} \n                  className={flag[index][0] == null ? \"\" : \"ysp-party-work-text-color\"}>\n                  {items}\n                </div>\n                <div onClick={_this.handlerClick.bind(_this)}  data-index={index}>\n                  {date[index]}\n                </div>\n              </div>\n            );\n          })\n        }\n      </div>\n    )\n   }\n}"
  getData: |
    if (!elem) {
      return;
    }
    var data = {
      title: [],
      date: [],
      flag: []
    };
    var uls = elem.querySelector("ul");
    var lis = uls && uls.querySelectorAll("li");
    for (var i = 0; i < lis.length; i++) {
      var a = [];
      var b = [];
      var c = [];
      var title = lis[i].querySelector("a").textContent.trim();
      var dates = lis[i].querySelector(".time").textContent.trim();
      var date = dates && dates.substr(0, 10);
      var flags = lis[i].querySelector("a").getAttribute("class");
      a.push(title);
      b.push(date);
      c.push(flags);
      data.title.push(a);
      data.date.push(b);
      data.flag.push(c);
    }
    return data;
  doAction: |
    if ('click' == data.eventType) {
      var index = data.customData.index;
      var uls = elem.querySelector("ul");
      uls && uls.querySelectorAll("li")[index].querySelector('a').click();
    }
    if ('moreClick' == data.eventType) {
      var as = elem.querySelectorAll("a");
      var asLength = as && as.length;
      elem.querySelectorAll("a")[asLength - 1].click();
    }
- name: 查询条件修改
  getTemplate: "module.exports = React.createClass({\n  onchange:function(e){\n    //debugger;\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'onchange',\n        data:[target.getAttribute('name'),target.selectedIndex]\n      })\n    }\n  },\n  onclickDate:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'onclickDate',\n        data:[target.getAttribute('name'),target.value]\n      })\n    }\n  },\n  onblur:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'onblur',\n        data:[target.getAttribute('name'),target.value]\n      })\n    }\n  },\n  onclickRadius:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    var ind=target.dataset.index;\n    var sel=target.dataset.checked;\n    if(handler){\n      handler({\n        eventType:'onclickRadius',\n        data:[ind,sel]\n      })\n    }\n  },\n  onclickBtn:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    \n    if(handler){\n      handler({\n        eventType:'onclickBtn',\n        \n      })\n    }\n  },\n  disclick:function(e){\n    var target = e.target;\n    if(target.className == 'Nex'){\n      target.className= 'Block';\n      var selectBar = target.parentElement.parentElement;\n      var divs = selectBar.querySelectorAll('div.ysp-selectBar-content-tt');\n      for(var i=0;i<divs.length;i++){\n        divs[i].style.display = 'none'\n      }\n      selectBar.lastChild.style.display = 'none';\n    }else{\n      target.className= 'Nex';\n      var selectBar = target.parentElement.parentElement;\n      var divs = selectBar.querySelectorAll('div.ysp-selectBar-content-tt');\n      for(var i=0;i<divs.length;i++){\n        divs[i].style.display = 'block'\n      }\n      selectBar.lastChild.style.display = 'block';\n    }\n  },\n  render: function() {\n    var data=this.props.customData;\n    var _this=this;\n   //console.log(data.content[0]);\n    var list0=data.content[0].sel.opt.map(function(d,i){ \n        var opts=d.map(function(opt,optId){\n          if(optId>=0){\n            return(\n                <option selected={data.content[0].sel.opted[i][optId]}>{opt}</option>\n            )\n          }\n            \n          \n          \n        })\n        return(              \n            <select name={data.content[0].sel.optType[i]} onChange={_this.onchange.bind(_this)}>{opts}</select>           \n        )\n    })\n \n    return (\n      <div className='ysp-selectBar-tt'>\n        <div className='ysp-selectBar-title-tt'><p>{data.title}</p><span onClick={this.disclick} className='Block'></span></div>\n        <div className='ysp-selectBar-content-tt'>\n          \t<div>\n          \t\t\t\t<p>{data.content[0].leftTitle[0]}</p>\n        \t\t\t\t\t{list0}\n              \t\t<p>—></p>\n          \t</div>\n          \t<div>\n          \t\t\t\t<p>{data.content[0].leftTitle[1]}</p>\n                  <AInput type='date' name={data.content[0].iptType[0]} value={data.content[0].iptVal[0]} onBlur={_this.onclickDate.bind(_this)}/>\n                  \n                  <AInput type='date' name={data.content[0].iptType[1]} value={data.content[0].iptVal[1]} onBlur={_this.onclickDate.bind(_this)}/>\n              \t\t<p>至</p>\n          \t</div>\n          \t<div>\n          \t\t\t<p>{data.content[0].leftTitle[2]}</p>\n          \t\t\t<AInput type='text' name={data.content[0].iptType[2]} value={data.content[0].iptVal[2]} onBlur={_this.onblur.bind(_this)}/>\n          \t</div>\n          \t\n        </div>\n     \t\t<div className='ysp-selectBar-content-tt'>\n        \t\t<div>\n          \t\t\t<p>{data.content[1].leftTitle[0]}</p>\n          \t\t\t<AInput type='text' name={data.content[1].iptType[0]} value={data.content[1].iptVal[0]} onBlur={_this.onblur.bind(_this)}/>\n          \t</div>\n          \t<div>\n            \t\t<p>{data.content[1].leftTitle[1]}</p>\n              \t<p className='ysp-radius-btn-tt'>\n              \t\t\t<span data-index='0' onClick={_this.onclickRadius.bind(_this)} data-checked={data.content[1].iptVal[2]} className={data.content[1].iptVal[2]==true?\"ysp-RadiusSelected-tt\":\"ysp-RadiusUnselected-tt\"}>流程类别模式</span>\n                <span data-index='1' onClick={_this.onclickRadius.bind(_this)} data-checked={data.content[1].iptVal[1]} className={data.content[1].iptVal[1]==true?\"ysp-RadiusSelected-tt\":\"ysp-RadiusUnselected-tt\"}>时间模式</span>\n              \t</p>\n                \n            </div>\n          \t\n          \t\n          \t\n        </div>\n        <div className='ysp-selectBar-content-tt'>\n        \t<div>\n          \t<p>{data.content[2].leftTitle[0]}</p>\n          \t<AInput type='text' name={data.content[2].iptType[0]} value={data.content[2].iptVal[0]} onBlur={_this.onblur.bind(_this)}/>\n          </div>\n        </div>\n        <div className='ysp-selectBarBtn-tt'>\n        \t<button onClick={_this.onclickBtn.bind(_this)}>{data.content[3].btn}</button>\n        </div>\n      </div>\n    )\n  }\n});"
  getData: "if (!elem) {\n  return;\n}\nvar data = {\n  content: []\n};\ndata.title = '查询条件';\nvar trs = elem.querySelectorAll('tr'); //循环每个tr\nfor (var i = 0; i < trs.length; i++) {\n  var trArr = {\n    leftTitle: [],\n    sel: {\n      optType: [],\n      opt: [],\n      opted: []\n    },\n    iptVal: [],\n    iptType: []\n  };\n\n  if (i == 0) {\n    var tds = trs[i].querySelectorAll('td'); //循环第一行中的td\n\n    for (var j = 0; j < tds.length; j++) {\n      var tdArr = [];\n      tdArr.push(tds[j].querySelector('label').textContent.trim());\n      trArr.leftTitle.push(tdArr); //遍历select\t\t\t\n\n      var sel = tds[0].querySelectorAll('select');\n\n      if (tds[j].querySelector('select') != null) {\n        for (var k = 0; k < sel.length; k++) {\n          var selArr = []; //selArr.push(sel[k].querySelector(\"option[selected='selected']\").textContent);\n\n          var opted = [];\n          var opt = sel[k].querySelectorAll('option');\n\n          for (var m = 0; m < opt.length; m++) {\n            // if (opt[m].selected == true) {\n            //   selArr.push(opt[m].textContent);\n            // }\n            opted.push(opt[m].selected);\n            selArr.push(opt[m].textContent);\n          }\n\n          trArr.sel.opt.push(selArr);\n          trArr.sel.opted.push(opted);\n          trArr.sel.optType.push(sel[k].getAttribute('name'));\n        }\n      }\n    }\n\n    trArr.iptType.push(tds[1].querySelectorAll('input')[0].getAttribute('name'));\n    trArr.iptType.push(tds[1].querySelectorAll('input')[1].getAttribute('name'));\n    trArr.iptType.push(tds[2].querySelectorAll('input')[0].getAttribute('name'));\n    trArr.iptVal.push(tds[1].querySelectorAll('input')[0].value);\n    trArr.iptVal.push(tds[1].querySelectorAll('input')[1].value);\n    trArr.iptVal.push(tds[2].querySelectorAll('input')[0].value);\n  } else if (i == 1) {\n    var tds = trs[i].querySelectorAll('td'); //循环第一行中的td\n\n    for (var j = 0; j < tds.length; j++) {\n      var tdArr = [];\n\n      if (tds[j].textContent.replace(/\\s+/g, '') != '') {\n        tdArr.push(tds[j].querySelector('label').textContent.trim());\n        trArr.leftTitle.push(tdArr); //遍历select\t\t\t\n\n        var sel = tds[2].querySelectorAll('select');\n\n        if (tds[j].querySelector('select') != null) {\n          for (var k = 0; k < sel.length; k++) {\n            var selArr = []; //selArr.push(sel[k].querySelector(\"option[selected='selected']\").textContent);\n\n            var opt = sel[k].querySelectorAll('option'); // for (var m = 0; m < opt.length; m++) {\n            // if (opt[m].selected == true) {\n            //   selArr.push(opt[m].textContent);\n            // }\n            // selArr.push(opt[m].textContent);\n            // }\n\n            trArr.sel.opt.push(selArr);\n            trArr.sel.optType.push(sel[k].getAttribute('name'));\n          }\n        }\n      }\n    }\n\n    trArr.iptType.push(tds[0].querySelectorAll('input')[0].getAttribute('name'));\n    trArr.iptType.push(tds[1].querySelectorAll('input')[0].getAttribute('name'));\n    trArr.iptType.push(tds[1].querySelectorAll('input')[1].getAttribute('name'));\n    trArr.iptVal.push(tds[0].querySelectorAll('input')[0].value);\n    trArr.iptVal.push(tds[1].querySelectorAll('input')[1].checked);\n    trArr.iptVal.push(tds[1].querySelectorAll('input')[0].checked);\n  } else if (i == 2) {\n    var tds = trs[i].querySelectorAll('td');\n\n    for (var j = 0; j < tds.length; j++) {\n      var tdArr = [];\n\n      if (tds[j].textContent.trim() != \"\") {\n        tdArr.push(tds[j].querySelector('label').textContent.trim());\n        trArr.leftTitle.push(tdArr);\n      }\n    }\n\n    trArr.iptType.push(tds[0].querySelectorAll('input')[0].getAttribute('name'));\n    trArr.iptVal.push(tds[0].querySelectorAll('input')[0].value);\n  } else if (i == 3) {\n    trArr.btn = trs[i].querySelector('button').textContent.trim();\n  }\n\n  data.content.push(trArr);\n}\nreturn data;\n"
  doAction: |
    if (data.eventType == 'onchange') {
      // debugger;
      var selId = data.dataCustom[0];
      var index = data.dataCustom[1];
      var txt = data.dataCustom[2];
      var target = elem.querySelector("select[name='" + selId + "']");
      elem.querySelector("select[name='" + selId + "']").querySelectorAll('option')[index].selected = true;
      target.dispatchEvent(new Event('change'));
    } else if (data.eventType == 'onclickDate') {
      var selId = data.dataCustom[0];
      var val = data.dataCustom[1];
      var target = elem.querySelector("input[name='" + selId + "']");
      target.value = val;
      target.focus();
    } else if (data.eventType == 'onblur') {
      var selId = data.dataCustom[0];
      var val = data.dataCustom[1];
      var target = elem.querySelector("input[name='" + selId + "']");
      target.value = val;
    } else if (data.eventType == 'onclickRadius') {
      var index = data.dataCustom[0];
      var sel = data.dataCustom[1];
      var target = elem.querySelectorAll("input[type='radio']")[index];
      target.checked = sel;
      target.click();
    } else if (data.eventType == 'onclickBtn') {
      var target = elem.querySelector("button");
      target.click();
    }
- name: 附件取消上传删除按钮
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target,\n        type = '',\n        data = '';\n    if(target.tagName.toLowerCase() == 'button'){\n      // console.log(target.id);\n      if(target.id == 'uploadDiv' ){\n        type = 'commit';\n        data = 'btnFileUpload';\n      }else{\n        type = 'add';\n        data = 'btnFileUpload';\n      }\n    }\n    if(target.tagName.toLowerCase() == 'p'){\n      type = 'updel';\n      data = {\n        index:target.getAttribute('data-index'),\n        i:target.className=='xiazai'?0:1\n      }\n    }\n    if(handler){\n      handler({\n        eventType:type,\n        data:data\n      })\n    }\n  },\n  click:function(e){\n    var target = e.target;\n    if(target.className == 'shang'){\n      target.className = 'xia';\n      var divs = target.parentElement.parentElement.querySelectorAll('div.displnone');\n      for(var i=0;i<divs.length;i++){\n        divs[i].className = 'displblock';\n      }\n    }else{\n      target.className = 'shang';\n      var divs = target.parentElement.parentElement.querySelectorAll('div.displblock');\n      for(var i=0;i<divs.length;i++){\n        divs[i].className = 'displnone';\n      }\n    }\n  },\n  loadclick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    if(handler){\n      handler({\n        eventType:'loadbtn',\n        data:{\n          index:target.getAttribute('data-id')\n        }\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    if(!data){\n      return '';\n    }\n    // var lis = data.content.map(function(ele,index){\n    //   var list = ele.map(function(d,i){\n    //     if(i==0){\n    //       return(\n    //       \t<div className='titlediv'>\n    //         \t<div>{'0'+(index+1)}</div>\n    //           <div>{d}</div>\n    //           <div onClick={_this.click} className='shang'></div>\n    //         </div>\n    //       )\n    //     }\n    //     if(i == ele.length-1){\n    //       if(d.length>2){\n    //           return(\n    //           <div className='displnone'>\n    //             <div className='contentitem contentspan' style={{'width':'100%','text-align-last':'auto','text-align':'center'}}><p className='shanchu' data-index={index} onClick={_this.onClick.bind(_this)}><span></span>{d[2]+d[3]}</p><p data-index={index} className='xiazai' onClick={_this.onClick.bind(_this)}><span></span>{d.length>2?d[0]+d[1]:''}</p></div>\n    //           </div>\n    //         )\n    //       }else{\n    //          return(\n    //           <div className='displnone'>\n    //             <div className='contentitem'><p className='xiazai' data-index={index} onClick={_this.onClick.bind(_this)}><span></span>{d[0]+d[1]}</p></div>\n    //           </div>\n    //         )\n    //       }\n    //     }\n    //     return(\n    //     \t<div className='displnone'>\n    //       \t<div className='contentitem'>{data.titles[i]}</div>\n    //         <div className='contentitem'>{d}</div>\n    //       </div>\n    //     )\n    //   })\n    //   return(\n    //   \t<div className='contentit'>{list}</div>\n    //   )\n    // })\n    \n            // <div>\n            //   <button onClick={_this.onClick.bind(_this)}>选择文件</button>\n            //   <button id={data.id} onClick={_this.onClick.bind(_this)}>上传文件</button>\n            // </div>\n    var lis = data.content.map(function(ele,index){\n      return(\n      \t<div className='Encltitle'>\n        \t<div>{ele[0]}</div>\n          <div><button data-id={index} onClick={_this.loadclick.bind(_this)}>下载</button></div>\n        </div>\n      )\n    })\n    return (\n      <div className='Enclosure'>\n        <div className='contenttitle'>\n          <span className='xia'></span>\n          <p>{data.title}\n          </p>\n        </div>\n        <div className='content'>\n    \t\t\t{lis}\n        </div>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    } // var data = ysp.customHelper.getTabledata(elem, ['文件名', '操作']);
    var data = ysp.customHelper.getTabledata(elem, ['文件名']);
    data.id = elem.nextElementSibling.nextElementSibling.id;
    data.title = '附件';
    return data;
  doAction: >
    var type = data.eventType;

    var data = data.customData; // if (type == 'commit') {

    //   // debugger;

    //   elem.ownerDocument.querySelector("#" + data).click();

    //   setTimeout(function () {

    //     elem.ownerDocument.defaultView.InitAttachmentList();

    //   }, 1000); // setTimeout(function () {

    //   //   var url = ysp.appMain.getActiveUrl();

    //   //   ysp.appMain.reloadPage(url);

    //   // }, 2000);

    // }

    // if (type == 'add') {

    //   elem.ownerDocument.querySelector("#" +
    data).previousElementSibling.querySelector('input').click();

    // }

    // if (type == 'updel') {

    //   var tds =
    elem.querySelectorAll('tbody')[1].querySelectorAll('tr')[data.index].querySelectorAll('td');

    //   tds[tds.length - 1].querySelectorAll('a')[data.i].click();

    // } //附件下载

    if (type == 'loadbtn') {
      var tds = elem.querySelectorAll('tbody')[1].querySelectorAll('tr')[data.index].querySelectorAll('td');
      tds[tds.length - 1].querySelectorAll('a')[0].click();
    }
- name: 纪检监察详情页渲染
  getTemplate: "module.exports = React.createClass({\n  render: function() {\n    var data = this.props.customData;\n    var lis = data.content.map(function(ele,index){\n      if(ele.flat == 'text'){\n        return(\n        \t<div>\n          \t<div>{ele.text}</div>\n          </div>\n        )\n      }else if(ele.flat == 'img'){\n        var imgs = ele.src.map(function(d,i){\n          return(\n          \t<img src={d} alt={ele.alt[i]}></img>\n          )\n        })\n        return(\n        \t<div>{imgs}</div>\n        )\n      } else if(ele.flat == 'ahref'){\n        var hrefs = ele.text.map(function(textele,textindex){\n          return(\n          \t<a href={ele.href[textindex]}>{textele}</a>\n          )\n        })\n        return (\n        \t<div>{hrefs}</div>\n        )\n      }\n      \n    })\n    return (\n      <div className='detail_new'>\n        <div className='deil_title'>\n        \t<h2>{data.title}</h2>\n          <p>{data.titleinfo}</p>\n        </div>\n        <div className='deil_content'>{lis}</div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    data.title = elem.firstElementChild.textContent.trim();

    data.titleinfo =
    elem.firstElementChild.nextElementSibling.textContent.trim();

    data.content = [];

    if (elem.querySelectorAll('div')[0]) {
      var contents = elem.querySelectorAll('div')[0].children;

      for (var i = 0; i < contents.length; i++) {
        if (contents[i].querySelector('img') || contents[i].textContent.trim() != '') {
          var obj = {};

          if (contents[i].querySelector('img')) {
            var imgs = contents[i].querySelectorAll('img');
            obj.src = [];
            obj.alt = [];

            for (var k = 0; k < imgs.length; k++) {
              obj.src.push(imgs[k].src);
              obj.alt.push(imgs[k].alt);
            }

            obj.text = contents[i].textContent.trim();
            obj.flat = 'img';
          }

          if (contents[i].textContent.trim() != '' && !contents[i].querySelector('a')) {
            obj.text = contents[i].textContent.trim();
            obj.flat = 'text';
          }

          if (contents[i].querySelector('a')) {
            obj.href = [];
            obj.text = [];
            var hrefs = contents[i].querySelectorAll('a');

            for (var k = 0; k < hrefs.length; k++) {
              obj.href.push(hrefs[k].href);
              obj.text.push(hrefs[k].textContent.trim());
            }

            obj.flat = 'ahref';
          }

          data.content.push(obj);
        }
      }
    }

    return data;
  doAction: ''
- name: 总部部署详情页
  getTemplate: "module.exports = React.createClass({\n  render: function() {\n    var data = this.props.customData;\n    var lis = data.content.map(function(ele,index){\n      if(ele.flat == 'text'){\n        if(ele.src){\n          var imgs = ele.src.map(function(d,i){\n          return(\n          \t<img src={d} alt={ele.alt[i]}></img>\n          )\n        })\n          return(\n          \t<div>\n          \t<div>{ele.text}</div>\n            <div>{imgs}</div>\n            </div>\n          )\n        }else{\n          return(\n        \t<div>\n          \t<div>{ele.text}</div>\n          </div>\n        )\n        }\n        \n      }else if(ele.flat == 'img'){\n        var imgs = ele.src.map(function(d,i){\n          return(\n          \t<img src={d} alt={ele.alt[i]}></img>\n          )\n        })\n        return(\n        \t<div>{imgs}</div>\n        )\n      } else if(ele.flat == 'ahref'){\n        var hrefs = ele.text.map(function(textele,textindex){\n          return(\n          \t<a href={ele.href[textindex]}>{textele}</a>\n          )\n        })\n        return (\n        \t<div>{hrefs}</div>\n        )\n      } else if(ele.flat == 'aimg'){\n        \n        // var imgs = ele.src.map(function(d,i){\n        //   return(\n        //   \t<img src={d} alt={ele.alt[i]}></img>\n        //   )\n        // })\n        var hrefs = ele.text.map(function(textele,textindex){\n          return(\n          \t<div><a href={ele.href[textindex]}>{textele}<img src={ele.src[textindex]} alt={ele.alt[textindex]}></img></a></div>\n          )\n        })\n        return(\n        \t<div>\n            {ele.textele}\n            {hrefs}\n          </div>\n        )\n      }\n      \n    })\n    return (\n      <div className='detail_new'>\n        <div className='deil_title'>\n        \t<h2>{data.title}</h2>\n          <p>{data.titleinfo}</p>\n        </div>\n        <div className='deil_content'>{lis}</div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    data.title = elem.firstElementChild.textContent.trim();

    data.titleinfo =
    elem.firstElementChild.nextElementSibling.textContent.trim();

    data.content = [];

    if (elem.querySelectorAll('div')[0]) {
      var contents = elem.querySelectorAll('div')[0].children;

      for (var i = 0; i < contents.length; i++) {
        if (contents[i].querySelector('img') || contents[i].textContent.trim() != '') {
          var obj = {};

          if (contents[i].querySelector('img') && !contents[i].querySelector('a')) {
            var imgs = contents[i].querySelectorAll('img');
            obj.src = [];
            obj.alt = [];

            for (var k = 0; k < imgs.length; k++) {
              obj.src.push(imgs[k].src);
              obj.alt.push(imgs[k].alt);
            }

            obj.text = contents[i].textContent.trim();
            obj.flat = 'img';
          }

          if (contents[i].textContent.trim() != '' && !contents[i].querySelector('a')) {
            obj.text = contents[i].textContent.trim();
            obj.flat = 'text';
          } //有下载但是没有图片


          if (contents[i].querySelector('a') && !contents[i].querySelector('img')) {
            obj.href = [];
            obj.text = [];
            var hrefs = contents[i].querySelectorAll('a');

            for (var k = 0; k < hrefs.length; k++) {
              obj.href.push(hrefs[k].href);
              obj.text.push(hrefs[k].textContent.trim());
            }

            obj.flat = 'ahref';
          } //判断内部有没有下载功能并且有图片


          if (contents[i].querySelector('img') && contents[i].querySelector('a')) {
            var imgs = contents[i].querySelectorAll('img');
            obj.src = [];
            obj.alt = [];

            for (var k = 0; k < imgs.length; k++) {
              obj.src.push(imgs[k].src);
              obj.alt.push(imgs[k].alt);
            }

            obj.text = contents[i].textContent.trim();
            obj.flat = 'img';
            obj.href = [];
            obj.text = [];
            var hrefs = contents[i].querySelectorAll('a');

            for (var k = 0; k < hrefs.length; k++) {
              obj.href.push(hrefs[k].href);
              obj.text.push(hrefs[k].textContent.trim());
            }

            obj.textele = contents[i].textContent.trim();
            var str = obj.textele;

            for (var u = 0; u < obj.text.length; u++) {
              if (obj.textele.indexOf(obj.text[u]) != -1) {
                str = str.replace(obj.text[u], '').trim();
              }
            }

            obj.textele = str;
            obj.flat = 'aimg';
          }

          data.content.push(obj);
        }
      }
    }

    return data;
  doAction: ''
- name: 附件ios下载
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target,\n        type = '',\n        data = '';\n    if(target.tagName.toLowerCase() == 'button'){\n      // console.log(target.id);\n      if(target.id == 'uploadDiv' ){\n        type = 'commit';\n        data = 'btnFileUpload';\n      }else{\n        type = 'add';\n        data = 'btnFileUpload';\n      }\n    }\n    if(target.tagName.toLowerCase() == 'p'){\n      type = 'updel';\n      data = {\n        index:target.getAttribute('data-index'),\n        i:target.className=='xiazai'?0:1\n      }\n    }\n    if(handler){\n      handler({\n        eventType:type,\n        data:data\n      })\n    }\n  },\n  click:function(e){\n    var target = e.target;\n    if(target.className == 'shang'){\n      target.className = 'xia';\n      var divs = target.parentElement.parentElement.querySelectorAll('div.displnone');\n      for(var i=0;i<divs.length;i++){\n        divs[i].className = 'displblock';\n      }\n    }else{\n      target.className = 'shang';\n      var divs = target.parentElement.parentElement.querySelectorAll('div.displblock');\n      for(var i=0;i<divs.length;i++){\n        divs[i].className = 'displnone';\n      }\n    }\n  },\n  loadclick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    if(handler){\n      handler({\n        eventType:'loadbtn',\n        data:{\n          index:target.getAttribute('data-id'),\n          href:target.parentElement.previousElementSibling.getAttribute('data-href')\n        }\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    if(!data){\n      return '';\n    }\n    // var lis = data.content.map(function(ele,index){\n    //   var list = ele.map(function(d,i){\n    //     if(i==0){\n    //       return(\n    //       \t<div className='titlediv'>\n    //         \t<div>{'0'+(index+1)}</div>\n    //           <div>{d}</div>\n    //           <div onClick={_this.click} className='shang'></div>\n    //         </div>\n    //       )\n    //     }\n    //     if(i == ele.length-1){\n    //       if(d.length>2){\n    //           return(\n    //           <div className='displnone'>\n    //             <div className='contentitem contentspan' style={{'width':'100%','text-align-last':'auto','text-align':'center'}}><p className='shanchu' data-index={index} onClick={_this.onClick.bind(_this)}><span></span>{d[2]+d[3]}</p><p data-index={index} className='xiazai' onClick={_this.onClick.bind(_this)}><span></span>{d.length>2?d[0]+d[1]:''}</p></div>\n    //           </div>\n    //         )\n    //       }else{\n    //          return(\n    //           <div className='displnone'>\n    //             <div className='contentitem'><p className='xiazai' data-index={index} onClick={_this.onClick.bind(_this)}><span></span>{d[0]+d[1]}</p></div>\n    //           </div>\n    //         )\n    //       }\n    //     }\n    //     return(\n    //     \t<div className='displnone'>\n    //       \t<div className='contentitem'>{data.titles[i]}</div>\n    //         <div className='contentitem'>{d}</div>\n    //       </div>\n    //     )\n    //   })\n    //   return(\n    //   \t<div className='contentit'>{list}</div>\n    //   )\n    // })\n    \n            // <div>\n            //   <button onClick={_this.onClick.bind(_this)}>选择文件</button>\n            //   <button id={data.id} onClick={_this.onClick.bind(_this)}>上传文件</button>\n            // </div>\n    var lis = data.content.map(function(ele,index){\n      return(\n      \t<div className='Encltitle'>\n        \t<div data-href={data.href[index]}>{ele[0]}</div>\n          <div><button data-id={index} onClick={_this.loadclick.bind(_this)}>下载</button></div>\n        </div>\n      )\n    })\n    return (\n      <div className='Enclosure'>\n        <div className='contenttitle'>\n          <span className='xia'></span>\n          <p>{data.title}\n          </p>\n        </div>\n        <div className='content'>\n    \t\t\t{lis}\n        </div>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    } // var data = ysp.customHelper.getTabledata(elem, ['文件名', '操作']);
    var data = ysp.customHelper.getTabledata(elem, ['文件名']);
    data.href = [];
    var hrefs = elem.querySelectorAll('a');
    for (var i = 0; i < hrefs.length; i++) {
      for (var k = 0; k < data.content.length; k++) {
        if (hrefs[i].textContent.trim() == data.content[k]) {
          data.href.push(hrefs[i].href);
        }
      }
    }
    data.id = elem.nextElementSibling.nextElementSibling.id;
    data.title = '附件';
    return data;
  doAction: >
    var type = data.eventType;

    var data = data.customData; // if (type == 'commit') {

    //   // debugger;

    //   elem.ownerDocument.querySelector("#" + data).click();

    //   setTimeout(function () {

    //     elem.ownerDocument.defaultView.InitAttachmentList();

    //   }, 1000); // setTimeout(function () {

    //   //   var url = ysp.appMain.getActiveUrl();

    //   //   ysp.appMain.reloadPage(url);

    //   // }, 2000);

    // }

    // if (type == 'add') {

    //   elem.ownerDocument.querySelector("#" +
    data).previousElementSibling.querySelector('input').click();

    // }

    // if (type == 'updel') {

    //   var tds =
    elem.querySelectorAll('tbody')[1].querySelectorAll('tr')[data.index].querySelectorAll('td');

    //   tds[tds.length - 1].querySelectorAll('a')[data.i].click();

    // } //附件下载

    // if (type == 'loadbtn') {

    // var tds =
    elem.querySelectorAll('tbody')[1].querySelectorAll('tr')[data.index].querySelectorAll('td');

    // tds[tds.length - 1].querySelectorAll('a')[0].click();

    // }

    if ("loadbtn" == type) {
      // var url = data.customData;
      var url = data.href;

      if (ysp.appMain.isIOS()) {
        top.EAPI.openWindow(url + "&_ysp_filepreview=1");
      } else if (ysp.appMain.isAndroid()) {
        top.location.href = url;
      } else {
        var tds = elem.querySelectorAll('tbody')[1].querySelectorAll('tr')[data.index].querySelectorAll('td');
        tds[tds.length - 1].querySelectorAll('a')[0].click();
      }
    }
- name: ios返回按钮修改
  getTemplate: "import { Header, HeaderLeft } from 'ysp-interior-components';\nimport { back } from 'appRenderer';\nmodule.exports = React.createClass({\n  click:function(e){\n    var handler = this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'click'\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData;\n    return (\n      <div className='titleH1'>\n          <Header title={data.title}>\n    \t\t\t\t<HeaderLeft>\n      \t\t\t\t<span></span><button onClick={this.click.bind(this)}>返回</button>\n    \t\t\t\t</HeaderLeft>\n  \t\t\t\t</Header>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {};
    var span = elem.querySelector('span');
    data.title = span.nextSibling.nextSibling.textContent.trim();
    return data;
  doAction: |
    if (data.eventType == 'click') {
      if (ysp.appMain.isIOS()) {
        // elem.ownerDocument.defaultView.close();
        ysp.runtime.Browser.activeBrowser.contentWindow.close();
      } else {
        ysp.appMain.back();
      }
    }
- name: 环节信息
  getTemplate: "module.exports = React.createClass({\n  render: function() {\n    var data = this.props.customData;\n      if(!data){\n        return '';\n      }\n    var lis = data.content.map(function(ele,index){\n      if(index > 0){\n        return(\n      \t<div>{ele}\n        </div>\n      )\n      }\n    })\n    return (\n      <div className='Auditor'>\n        <div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='content'><div className='contentitem'>{data.content[0].left}</div><div className='contentitem'>{lis}</div></div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    data.title = '环节信息';

    data.content = [];

    data.content.push({
      left: elem.querySelector('tr').querySelector('td').textContent.trim()
    });

    var trs =
    elem.querySelector('tr').querySelectorAll('td')[1].querySelectorAll('tr');

    for (var i = 0; i < trs.length; i++) {
      data.content.push(trs[i].textContent.trim());
    }

    return data;
  doAction: ''
- name: ATextarea审批输入框
  getTemplate: "module.exports = React.createClass({\n  onBlur:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    if(handler){\n      handler({\n        eventType:'change',\n        data:target.value\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    return (\n      <div className='approval'>\n        <div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='content'>\n          \t<div className='contentitem'>{data.content[0].left}</div>\n          \t<div className='contentitem'>{data.content[0].right}</div>\n          </div>\n          <div className='content'>\n          \t<div className='contentitem'>{data.content[1].left}</div>\n            <ATextarea value={data.content[1].right} onBlur={_this.onBlur.bind(_this)}></ATextarea>\n        \t</div>\n        <div className='tishi'>{data.content[2].left}</div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    data.title = '审批操作';

    data.content = [];

    var trs = elem.querySelectorAll('tr');

    var obj = {};

    var str = trs[0].querySelectorAll('td')[0].textContent.trim();

    var arr = str.split(":");

    obj.left =
    trs[0].querySelectorAll('td')[0].textContent.trim().split('：')[0]; //
    obj.left = arr;

    obj.right = trs[0].querySelectorAll('td')[1].textContent.trim();

    data.content.push(obj);

    var obj = {};

    obj.left =
    trs[1].querySelectorAll('td')[0].textContent.trim().split('：')[0];

    obj.right =
    trs[1].querySelectorAll('td')[1].querySelector('textarea').value;

    data.content.push(obj);

    data.content.push({
      left: trs[1].querySelectorAll('td')[1].querySelector('p').textContent.trim()
    });

    return data;
  doAction: |
    var type = data.eventType;
    var data = data.customData;
    if (type == 'change') {
      elem.querySelector('textarea').value = data;
    }
- name: 待办审批操作
  getTemplate: "module.exports = React.createClass({\n  onBlur:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    if(handler){\n      handler({\n        eventType:'change',\n        data:target.value\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    return (\n      <div className='approval'>\n        <div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='content'>\n          \t<div className='contentitem'>{data.content[0].left}</div>\n          \t<div className='contentitem'>{data.content[0].right}</div>\n          </div>\n          <div className='content'>\n          \t<div className='contentitem'>{data.content[1].left}</div>\n            <ATextarea value={data.content[1].right} onBlur={_this.onBlur.bind(_this)}></ATextarea>\n        \t</div>\n        <div className='tishi'>{data.content[2].left}</div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    data.title = '审批操作';

    data.content = [];

    var trs = elem.querySelectorAll('tr');

    var obj = {};

    var str = trs[0].querySelectorAll('td')[0].textContent.trim();

    var arr = str.split(":");

    obj.left =
    trs[0].querySelectorAll('td')[0].textContent.trim().split('：')[0]; //
    obj.left = arr;

    obj.right = trs[0].querySelectorAll('td')[1].textContent.trim();

    data.content.push(obj);

    var obj = {};

    obj.left =
    trs[1].querySelectorAll('td')[0].textContent.trim().split('：')[0];

    obj.right =
    trs[1].querySelectorAll('td')[1].querySelector('textarea').value;

    data.content.push(obj);

    data.content.push({
      left: trs[1].querySelectorAll('td')[1].querySelector('p').textContent.trim()
    });

    return data;
  doAction: |
    var type = data.eventType;
    var data = data.customData;
    if (type == 'change') {
      elem.querySelector('textarea').value = data;
    }
- name: 发起流程按钮
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target,\n        type = '',\n        data;\n    if(target.textContent.trim() == '提交申请'){\n      type = 'submitbtn';\n      data = {\n        value:'提交申请'\n      }\n    }\n    if(target.textContent.trim() == '审批预览'){\n      type = 'Concanbtn';\n      data = {\n        value:'审批预览'\n      }\n    }\n    // if(target.tagName.toLowerCase() == 'div'){\n    //   target.parentElement.nextElementSibling.style.display = 'block';\n    //   // target.parentElement.nextElementSibling.style.height = target.ownerDocument.style.height;\n    //   var lis = target.parentElement.parentElement.querySelector('.dianbl').querySelectorAll('li');\n    //   for(var i=0;i<lis.length;i++){\n    //     lis[i].style.bottom = i*50 +'px';\n    //   }\n    // }\n    // if(target.tagName.toLowerCase() == 'p'){\n    //   target.parentElement.parentElement.parentElement.style.display = 'none';\n    // }\n    // if(target.tagName.toLowerCase() == 'button'){\n    //   type = 'click';\n    //   data = target.getAttribute('data-id');\n    // }\n    if(handler){\n      handler({\n        eventType:type,\n        data:data\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData;\n    var _this = this;\n    if(!data){\n      return '';\n    }\n  \tvar lis = data.map(function(d,i){\n      if(i<3){\n        return(\n        \t<button data-id={i} onClick={_this.onClick.bind(_this)}>{d}</button>\n        )\n      }\n    })\n    // var list = data.map(function(d,i){\n    //   if(i>2){\n    //     return(\n    //     \t<li><button data-id={i} onClick={_this.onClick.bind(_this)}>{d}</button></li>\n    //     )\n    //   }\n    // })\n    return (\n      <div className='submit'>\n        <div className='subtrue'><div className='btnlength02'>{lis}</div></div>\n      </div>\n    )\n    // <div style={{'display':data.length>3?'block':\"none\"}} onClick={_this.onClick.bind(_this)}></div>\n    //     <div className='dianbl'><ul><li><p onClick={_this.onClick}>取消</p></li>{list}</ul></div>\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = [];
    var lis = elem.querySelectorAll('li');
    for (var i = 0; i < lis.length; i++) {
      if (lis[i].textContent.trim() == '提交申请' || lis[i].textContent.trim() == '审批预览') {
        data.push(lis[i].textContent.trim());
      }
    }
    return data;
  doAction: |
    var type = data.eventType;
    var data = data.customData;
    if (type == 'click') {
      elem.querySelectorAll('li')[data].querySelector('a').click();
    }
    if (type == 'submitbtn') {
      var alist = elem.querySelectorAll('a');
      alist[0].click();
    }
    if (type == 'Concanbtn') {
      elem.querySelectorAll('a')[2].click();
    }
- name: ios附件下载
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target,\n        type = '',\n        data = '';\n    if(target.tagName.toLowerCase() == 'button'){\n      // console.log(target.id);\n      if(target.id == 'uploadDiv' ){\n        type = 'commit';\n        data = 'btnFileUpload';\n      }else{\n        type = 'add';\n        data = 'btnFileUpload';\n      }\n    }\n    if(target.tagName.toLowerCase() == 'p'){\n      type = 'updel';\n      data = {\n        index:target.getAttribute('data-index'),\n        i:target.className=='xiazai'?0:1\n      }\n    }\n    if(handler){\n      handler({\n        eventType:type,\n        data:data\n      })\n    }\n  },\n  click:function(e){\n    var target = e.target;\n    if(target.className == 'shang'){\n      target.className = 'xia';\n      var divs = target.parentElement.parentElement.querySelectorAll('div.displnone');\n      for(var i=0;i<divs.length;i++){\n        divs[i].className = 'displblock';\n      }\n    }else{\n      target.className = 'shang';\n      var divs = target.parentElement.parentElement.querySelectorAll('div.displblock');\n      for(var i=0;i<divs.length;i++){\n        divs[i].className = 'displnone';\n      }\n    }\n  },\n  loadclick:function(e){\n    var handler = this.props.customHandler,\n        target = e.target;\n    if(handler){\n      handler({\n        eventType:'loadbtn',\n        data:{\n          index:target.getAttribute('data-id'),\n          href:target.parentElement.previousElementSibling.getAttribute('data-href')\n        }\n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    if(!data){\n      return '';\n    }\n    // var lis = data.content.map(function(ele,index){\n    //   var list = ele.map(function(d,i){\n    //     if(i==0){\n    //       return(\n    //       \t<div className='titlediv'>\n    //         \t<div>{'0'+(index+1)}</div>\n    //           <div>{d}</div>\n    //           <div onClick={_this.click} className='shang'></div>\n    //         </div>\n    //       )\n    //     }\n    //     if(i == ele.length-1){\n    //       if(d.length>2){\n    //           return(\n    //           <div className='displnone'>\n    //             <div className='contentitem contentspan' style={{'width':'100%','text-align-last':'auto','text-align':'center'}}><p className='shanchu' data-index={index} onClick={_this.onClick.bind(_this)}><span></span>{d[2]+d[3]}</p><p data-index={index} className='xiazai' onClick={_this.onClick.bind(_this)}><span></span>{d.length>2?d[0]+d[1]:''}</p></div>\n    //           </div>\n    //         )\n    //       }else{\n    //          return(\n    //           <div className='displnone'>\n    //             <div className='contentitem'><p className='xiazai' data-index={index} onClick={_this.onClick.bind(_this)}><span></span>{d[0]+d[1]}</p></div>\n    //           </div>\n    //         )\n    //       }\n    //     }\n    //     return(\n    //     \t<div className='displnone'>\n    //       \t<div className='contentitem'>{data.titles[i]}</div>\n    //         <div className='contentitem'>{d}</div>\n    //       </div>\n    //     )\n    //   })\n    //   return(\n    //   \t<div className='contentit'>{list}</div>\n    //   )\n    // })\n    \n            // <div>\n            //   <button onClick={_this.onClick.bind(_this)}>选择文件</button>\n            //   <button id={data.id} onClick={_this.onClick.bind(_this)}>上传文件</button>\n            // </div>\n    var lis = data.content.map(function(ele,index){\n      return(\n      \t<div className='Encltitle'>\n        \t<div data-href={data.href[index]}>{ele[0]}</div>\n          <div><button data-id={index} onClick={_this.loadclick.bind(_this)}>查看</button></div>\n        </div>\n      )\n    })\n    return (\n      <div style={{'display':data.content.length>0?'block':'none'}} className='Enclosure'>\n        <div className='contenttitle'>\n          <span className='xia'></span>\n          <p>{data.title}\n          </p>\n        </div>\n        <div className='content'>\n    \t\t\t{lis}\n        </div>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    } // var data = ysp.customHelper.getTabledata(elem, ['文件名', '操作']);
    var data = ysp.customHelper.getTabledata(elem, ['文件名']);
    data.href = [];
    var hrefs = elem.querySelectorAll('a');
    for (var i = 0; i < hrefs.length; i++) {
      for (var k = 0; k < data.content.length; k++) {
        if (hrefs[i].textContent.trim() == data.content[k]) {
          data.href.push(hrefs[i].href);
        }
      }
    }
    data.id = elem.nextElementSibling.nextElementSibling.id;
    data.title = '附件';
    return data;
  doAction: >
    var type = data.eventType;

    var data = data.customData; // if (type == 'commit') {

    //   // debugger;

    //   elem.ownerDocument.querySelector("#" + data).click();

    //   setTimeout(function () {

    //     elem.ownerDocument.defaultView.InitAttachmentList();

    //   }, 1000); // setTimeout(function () {

    //   //   var url = ysp.appMain.getActiveUrl();

    //   //   ysp.appMain.reloadPage(url);

    //   // }, 2000);

    // }

    // if (type == 'add') {

    //   elem.ownerDocument.querySelector("#" +
    data).previousElementSibling.querySelector('input').click();

    // }

    // if (type == 'updel') {

    //   var tds =
    elem.querySelectorAll('tbody')[1].querySelectorAll('tr')[data.index].querySelectorAll('td');

    //   tds[tds.length - 1].querySelectorAll('a')[data.i].click();

    // } //附件下载

    // if (type == 'loadbtn') {

    // var tds =
    elem.querySelectorAll('tbody')[1].querySelectorAll('tr')[data.index].querySelectorAll('td');

    // tds[tds.length - 1].querySelectorAll('a')[0].click();

    // }

    if ("loadbtn" == type) {
      // var url = data.customData;
      var url = data.href;

      if (ysp.appMain.isIOS()) {
        top.EAPI.openWindow(url + "&_ysp_filepreview=1");
      } else if (ysp.appMain.isAndroid()) {
        top.location.href = url;
      } else {
        var tds = elem.querySelectorAll('tbody')[1].querySelectorAll('tr')[data.index].querySelectorAll('td');
        tds[tds.length - 1].querySelectorAll('a')[0].click();
      }
    }
