- name: 分页滑动
  getTemplate: "module.exports = React.createClass({\n  onClick:function(e){\n    var handler = this.props.customHandler;\n    var target = e.target;\n    if(handler){\n      handler({\n        eventType:'click',\n        data:target.getAttribute('data-id')\n      })\n    }\n  },\n  onclickpage:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'onclickpage',\n        data:[target.dataset.index,target.dataset.id]\n      })\n    }\n  },\n  onclickpreOnce:function(e){\n    var handler = this.props.customHandler;\n    var target = e.target;\n    if(handler){\n      handler({\n        eventType:'onclickpreOnce'\n        \n      })\n    }\n  },\n  onClicknextOnce:function(e){\n    var handler = this.props.customHandler;\n    var target = e.target;\n    if(handler){\n      handler({\n        eventType:'onClicknextOnce',\n        \n      })\n    }\n  },\n  render: function() {\n    var data = this.props.customData;\n    if(!data){\n      return (\n        <div>\n        \t\n        </div>\n      )\n    }\n    var str = '<',kr = '|<',\n        _this = this;\n    var lis = data.map(function(ele,index){\n      if(index!=0&&index!=data.length-1){\n        if(ele.type!='nextPage'){\n           return(\n              <li data-id={index} onClick={_this.onClick} className={ele.class}>{ele.text}</li>\n            )\n        }\n        \n      }\n    })\n    return (\n      <div className='footerbtn'>\n        <ul>\n          <li data-id='prevPage' data-index={0} onClick={_this.onclickpage.bind(_this)} className='ysp-prePage'>{kr}</li>\n          {data[1].type=='nextPage'?<li data-id='prev' onClick={_this.onclickpreOnce.bind(_this)} className='ysp-preOnce'>...</li>:''}\n          <span className='ysp-pageBtnScroll-tt'><span>{lis}</span></span>\n          {data[data.length-2].type=='nextPage'?<li data-id='next' onClick={_this.onClicknextOnce.bind(_this)} className='ysp-nextOne'>...</li>:''}\n          <li data-id='nextPage' data-index={data.length-1} onClick={_this.onclickpage.bind(_this)} className='ysp-nextPage'>>|</li>\n        </ul>\n      </div>\n    )\n  }\n});"
  getData: |
    //console.log(elem);
    if (!elem) {
      return "";
    }
    if (elem) {
      var data = [];
      var nodes = elem.children;

      for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].textContent.trim() == '...') {
          data.push({
            text: nodes[i].textContent.trim(),
            type: 'nextPage'
          });
        } else {
          data.push({
            text: nodes[i].textContent.trim(),
            class: nodes[i].className
          });
        }
      }

      return data;
    }
  doAction: |
    if (data.eventType == 'click') {
      //debugger;
      var index = parseInt(data.dataCustom);

      if (index == 1) {
        var target = elem.querySelectorAll('a')[index];
        target.click();
      } else {
        var target = elem.querySelectorAll('a')[index - 1];
        target.click();
      }
    } else if (data.eventType == 'onclickpage') {
      //debugger;
      var index = parseInt(data.dataCustom[0]);
      var id = data.dataCustom[1];

      if (id == 'prevPage') {
        var target = elem.querySelectorAll('a')[index];
        target.click();
      } else if (id == 'nextPage') {
        var target = elem.querySelectorAll('a')[index - 1];
        target.click();
      }
    } else if (data.eventType == 'onClicknextOnce') {
      // debugger;
      var trs = elem.querySelectorAll('a');
      var trsLen = trs.length;

      if (trs[trsLen - 2].textContent.trim() == '...') {
        var target = trs[trsLen - 2];
        target.click();
      }
    } else if (data.eventType == 'onclickpreOnce') {
      debugger;
      var trs = elem.querySelectorAll('a');
      var trsLen = trs.length;

      if (trs[1].textContent.trim() == '...') {
        var target = trs[1];
        target.click();
      }
    } // } else if (data.eventType == 'onclickpreOnce') {
    //   // debugger;
    //   var child = elem.querySelectorAll('a');
    //   var end = parseInt(elem.querySelector('.cpb').textContent);
    //   for (var i = end; i > 0; i--) {
    //     if (i == 1) {
    //       alert('已经到首页了');
    //     } else {
    //       child[i - 1].click();
    //       break;
    //     }
    //   }
    // } else if (data.eventType == 'onClicknextOnce') {
    //   var child = elem.querySelectorAll('a');
    //   var start = parseInt(elem.querySelector('.cpb').textContent);
    //   for (var i = start; i < child.length; i++) {
    //     if (i == child.length - 1) {
    //       alert('已经到末页了');
    //     } else {
    //       child[i].click();
    //       break;
    //     }
    //   }
    // }
- name: 查询条件
  getTemplate: "module.exports = React.createClass({\n  onchange:function(e){\n    //debugger;\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'onchange',\n        data:[target.getAttribute('name'),target.selectedIndex]\n      })\n    }\n  },\n  onclickDate:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'onclickDate',\n        data:[target.getAttribute('name'),target.value]\n      })\n    }\n  },\n  onblur:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    if(handler){\n      handler({\n        eventType:'onblur',\n        data:[target.getAttribute('name'),target.value]\n      })\n    }\n  },\n  onclickRadius:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    var ind=target.dataset.index;\n    var sel=target.dataset.checked;\n    if(handler){\n      handler({\n        eventType:'onclickRadius',\n        data:[ind,sel]\n      })\n    }\n  },\n  onclickBtn:function(e){\n    var target=e.target;\n    var handler=this.props.customHandler;\n    \n    if(handler){\n      handler({\n        eventType:'onclickBtn',\n        \n      })\n    }\n  },\n  render: function() {\n    var data=this.props.customData;\n    var _this=this;\n   //console.log(data.content[0]);\n    var list0=data.content[0].sel.opt.map(function(d,i){ \n        var opts=d.map(function(opt,optId){\n          if(optId>0){\n            return(\n                <option selected={d[0]==opt? true:false}>{opt}</option>\n            )\n          }\n            \n          \n          \n        })\n        return(              \n            <select name={data.content[0].sel.optType[i]} onChange={_this.onchange.bind(_this)}>{opts}</select>           \n        )\n    })\n    var lis1=data.content[1].sel.opt.map(function(d,i){ \n        var opts=d.map(function(opt,optId){\n          if(optId>0){\n            return(\n                <option>{opt}</option>\n            )\n          }\n        })\n        return(              \n            <select name={data.content[1].sel.optType[i]} onChange={_this.onchange.bind(_this)}>{opts}</select>           \n        )\n    })\n    return (\n      <div className='ysp-selectBar-tt'>\n        <div className='ysp-selectBar-title-tt'>{data.title}</div>\n        <div className='ysp-selectBar-content-tt'>\n          \t<div>\n          \t\t\t\t<p>{data.content[0].leftTitle[0]}</p>\n        \t\t\t\t\t{list0}\n              \t\t<p>—></p>\n          \t</div>\n          \t<div>\n          \t\t\t\t<p>{data.content[0].leftTitle[1]}</p>\n                  <AInput type='date' name={data.content[0].iptType[0]} value={data.content[0].iptVal[0]} onBlur={_this.onclickDate.bind(_this)}/>\n                  \n                  <AInput type='date' name={data.content[0].iptType[1]} value={data.content[0].iptVal[1]} onBlur={_this.onclickDate.bind(_this)}/>\n              \t\t<p>至</p>\n          \t</div>\n          \t<div>\n          \t\t\t<p>{data.content[0].leftTitle[2]}</p>\n          \t\t\t<AInput type='text' name={data.content[0].iptType[2]} value={data.content[0].iptVal[2]} onBlur={_this.onblur.bind(_this)}/>\n          \t</div>\n          \t\n        </div>\n     \t\t<div className='ysp-selectBar-content-tt'>\n        \t\t<div>\n          \t\t\t<p>{data.content[1].leftTitle[0]}</p>\n          \t\t\t<AInput type='text' name={data.content[1].iptType[0]} value={data.content[1].iptVal[0]} onBlur={_this.onblur.bind(_this)}/>\n          \t</div>\n          \t<div>\n            \t\t<p>{data.content[1].leftTitle[1]}</p>\n              \t<p className='ysp-radius-btn-tt'>\n              \t\t\t<span data-index='0' onClick={_this.onclickRadius.bind(_this)} data-checked={data.content[1].iptVal[2]} className={data.content[1].iptVal[2]==true?\"ysp-RadiusSelected-tt\":\"ysp-RadiusUnselected-tt\"}>流程类别模式</span>\n                <span data-index='1' onClick={_this.onclickRadius.bind(_this)} data-checked={data.content[1].iptVal[1]} className={data.content[1].iptVal[1]==true?\"ysp-RadiusSelected-tt\":\"ysp-RadiusUnselected-tt\"}>时间模式</span>\n              \t</p>\n                \n            </div>\n          \t<div>\n          \t\t\t<p>{data.content[1].leftTitle[2]}</p>\n          \t\t\t{lis1}          \t\n          \t</div>\n          \t\n          \t\n        </div>\n        <div className='ysp-selectBar-content-tt'>\n        \t<div>\n          \t<p>{data.content[2].leftTitle[0]}</p>\n          \t<AInput type='text' name={data.content[2].iptType[0]} value={data.content[2].iptVal[0]} onBlur={_this.onblur.bind(_this)}/>\n          </div>\n        </div>\n        <div className='ysp-selectBarBtn-tt'>\n        \t<button onClick={_this.onclickBtn.bind(_this)}>{data.content[3].btn}</button>\n        </div>\n      </div>\n    )\n  }\n});"
  getData: "if (!elem) {\n  return;\n}\nvar data = {\n  content: []\n};\ndata.title = '查询条件';\nvar trs = elem.querySelectorAll('tr'); //循环每个tr\nfor (var i = 0; i < trs.length; i++) {\n  var trArr = {\n    leftTitle: [],\n    sel: {\n      optType: [],\n      opt: []\n    },\n    iptVal: [],\n    iptType: []\n  };\n\n  if (i == 0) {\n    var tds = trs[i].querySelectorAll('td'); //循环第一行中的td\n\n    for (var j = 0; j < tds.length; j++) {\n      var tdArr = [];\n      tdArr.push(tds[j].querySelector('label').textContent.trim());\n      trArr.leftTitle.push(tdArr); //遍历select\t\t\t\n\n      var sel = tds[0].querySelectorAll('select');\n\n      if (tds[j].querySelector('select') != null) {\n        for (var k = 0; k < sel.length; k++) {\n          var selArr = []; //selArr.push(sel[k].querySelector(\"option[selected='selected']\").textContent);\n\n          var opt = sel[k].querySelectorAll('option');\n\n          for (var m = 0; m < opt.length; m++) {\n            if (opt[m].selected == true) {\n              selArr.push(opt[m].textContent);\n            }\n\n            selArr.push(opt[m].textContent);\n          }\n\n          trArr.sel.opt.push(selArr);\n          trArr.sel.optType.push(sel[k].getAttribute('name'));\n        }\n      }\n    }\n\n    trArr.iptType.push(tds[1].querySelectorAll('input')[0].getAttribute('name'));\n    trArr.iptType.push(tds[1].querySelectorAll('input')[1].getAttribute('name'));\n    trArr.iptType.push(tds[2].querySelectorAll('input')[0].getAttribute('name'));\n    trArr.iptVal.push(tds[1].querySelectorAll('input')[0].value);\n    trArr.iptVal.push(tds[1].querySelectorAll('input')[1].value);\n    trArr.iptVal.push(tds[2].querySelectorAll('input')[0].value);\n  } else if (i == 1) {\n    var tds = trs[i].querySelectorAll('td'); //循环第一行中的td\n\n    for (var j = 0; j < tds.length; j++) {\n      var tdArr = [];\n      tdArr.push(tds[j].querySelector('label').textContent.trim());\n      trArr.leftTitle.push(tdArr); //遍历select\t\t\t\n\n      var sel = tds[2].querySelectorAll('select');\n\n      if (tds[j].querySelector('select') != null) {\n        for (var k = 0; k < sel.length; k++) {\n          var selArr = []; //selArr.push(sel[k].querySelector(\"option[selected='selected']\").textContent);\n\n          var opt = sel[k].querySelectorAll('option');\n\n          for (var m = 0; m < opt.length; m++) {\n            if (opt[m].selected == true) {\n              selArr.push(opt[m].textContent);\n            }\n\n            selArr.push(opt[m].textContent);\n          }\n\n          trArr.sel.opt.push(selArr);\n          trArr.sel.optType.push(sel[k].getAttribute('name'));\n        }\n      }\n    }\n\n    trArr.iptType.push(tds[0].querySelectorAll('input')[0].getAttribute('name'));\n    trArr.iptType.push(tds[1].querySelectorAll('input')[0].getAttribute('name'));\n    trArr.iptType.push(tds[1].querySelectorAll('input')[1].getAttribute('name'));\n    trArr.iptVal.push(tds[0].querySelectorAll('input')[0].value);\n    trArr.iptVal.push(tds[1].querySelectorAll('input')[1].checked);\n    trArr.iptVal.push(tds[1].querySelectorAll('input')[0].checked);\n  } else if (i == 2) {\n    var tds = trs[i].querySelectorAll('td');\n\n    for (var j = 0; j < tds.length; j++) {\n      var tdArr = [];\n\n      if (tds[j].textContent.trim() != \"\") {\n        tdArr.push(tds[j].querySelector('label').textContent.trim());\n        trArr.leftTitle.push(tdArr);\n      }\n    }\n\n    trArr.iptType.push(tds[0].querySelectorAll('input')[0].getAttribute('name'));\n    trArr.iptVal.push(tds[0].querySelectorAll('input')[0].value);\n  } else if (i == 3) {\n    trArr.btn = trs[i].querySelector('button').textContent.trim();\n  }\n\n  data.content.push(trArr);\n}\nreturn data;\n"
  doAction: |
    if (data.eventType == 'onchange') {
      // debugger;
      var selId = data.dataCustom[0];
      var index = data.dataCustom[1];
      var txt = data.dataCustom[2];
      var target = elem.querySelector("select[name='" + selId + "']");
      elem.querySelector("select[name='" + selId + "']").querySelectorAll('option')[index].selected = true;
      target.dispatchEvent(new Event('change'));
    } else if (data.eventType == 'onclickDate') {
      var selId = data.dataCustom[0];
      var val = data.dataCustom[1];
      var target = elem.querySelector("input[name='" + selId + "']");
      target.value = val;
      target.focus();
    } else if (data.eventType == 'onblur') {
      var selId = data.dataCustom[0];
      var val = data.dataCustom[1];
      var target = elem.querySelector("input[name='" + selId + "']");
      target.value = val;
    } else if (data.eventType == 'onclickRadius') {
      var index = data.dataCustom[0];
      var sel = data.dataCustom[1];
      var target = elem.querySelectorAll("input[type='radio']")[index];
      target.checked = sel;
      target.click();
    } else if (data.eventType == 'onclickBtn') {
      var target = elem.querySelector("button");
      target.click();
    }
- name: 发起人
  getTemplate: "module.exports = React.createClass({\n  click:function(e){\n    var target = e.target;\n    if(target.parentElement.parentElement.nextElementSibling.className == 'content disnone'){\n      target.className = 'zhankai';\n      target.parentElement.parentElement.nextElementSibling.className = 'content';\n    }else{\n      target.className = 'shouqi';\n      target.parentElement.parentElement.nextElementSibling.className = 'content disnone'\n    }\n  },\n  render: function() {\n    var data = this.props.customData,\n        _this = this;\n    var lis = data.content.map(function(ele,index){\n      return(\n      \t<div className='contenttit'>\n        \t<div className='contentitem'>{ele.leftval}</div>\n          <div className='contentitem'>{ele.rightval}</div>\n        </div>\n      )\n    })\n    return (\n      <div className='initiator'>\n        <div className='contenttitle'><span></span><p>{data.title}<i className='shouqi' onClick={_this.click}></i></p></div>\n        <div className='content disnone'>{lis}</div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = {};

    data.title = elem.querySelector("div.title").textContent.trim();

    data.content = [];

    var trs =
    elem.querySelector('table').querySelector('tbody').querySelectorAll('tr');

    for (var i = 0; i < trs.length; i++) {
      var tds = trs[i].querySelectorAll('td');

      for (var k = 0; k < tds.length; k++) {
        data.content.push({
          leftval: tds[k].querySelector('label').textContent.trim(),
          rightval: tds[k].querySelector('input').value
        });
      }
    }

    return data;
  doAction: ''
- name: 审批日志
  getTemplate: "module.exports = React.createClass({\n  render: function() {\n    var data = this.props.customData;\n    var ths = data.titles.map(function(d,i){\n      return(\n      \t<th>{d}</th>\n      )\n    })\n    var trs = data.content.map(function(d,i){\n      var lis = d.map(function(ele,index){\n        return(\n        \t<td>{ele}</td>\n        )\n      })\n      return(\n      \t<tr>{lis}</tr>\n      )\n    })\n    return (\n      <div className='examination'>\n        <div className='contenttitle'><span></span><p>{data.title}</p></div>\n        <div className='contentitem'>\n        \t<table>\n            <thead><tr>{ths}</tr></thead>\n            <tbody>{trs}</tbody>\n          </table>\n        </div>\n      </div>\n    )\n  }\n});"
  getData: >
    if (!elem) {
      return;
    }

    var data = ysp.customHelper.getTableData(elem, ['环节名称', '人员姓名', '人员公司',
    '人员部门', '人员职位', '审批操作', '审批时间', '意见']);

    data.title = '审批日志';

    return data;
  doAction: ''
- name: 关闭按钮
  getTemplate: |-
    module.exports = React.createClass({
      onclickClose:function(e){
        var target=e.target;
        var handler=this.props.customHandler;
        if(handler){
          handler({
            eventType:'close'
          })
        }
      },
      render: function() {
        return (
          <div className='ysp-closeBtn-tt'>
            <button onClick={this.onclickClose.bind(this)}>{this.props.customData}</button>
          </div>
        )
      }
    });
  getData: |
    if (!elem) {
      return;
    }
    return elem.textContent;
  doAction: |
    if (data.eventType == 'close') {
      elem.click();
    }
- name: 头部
  getTemplate: "import { Header, HeaderLeft } from 'ysp-interior-components';\nimport { back } from 'appRenderer';\nmodule.exports = React.createClass({\n  render: function() {\n    var data = this.props.customData;\n    return (\n      <div className='titleH1'>\n          <Header title={data.title}>\n    \t\t\t\t<HeaderLeft>\n      \t\t\t\t<span></span><button onClick={back}>返回</button>\n    \t\t\t\t</HeaderLeft>\n  \t\t\t\t</Header>\n      </div>\n    )\n  }\n});"
  getData: |
    if (!elem) {
      return;
    }
    var data = {};
    var span = elem.querySelector('span');
    data.title = span.nextSibling.nextSibling.textContent.trim();
    return data;
  doAction: ''
