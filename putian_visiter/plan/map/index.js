(function (win, ysp) {
  ysp.runtime.Model.extendLoadingModel({
    getData_control7: function (elem) {},
    doAction_uiControl10: function (data, elem) {
      if (data.eventType == 'click') {
        ysp.appMain.back();
      }
    },
    getTemplate_uiControl10: function () {
      var selfTemplate = "var BackBtn = require('ysp-custom-components').BackBtn;\nmodule.exports = React.createClass({\n  render: function() {\n    return <BackBtn  handler={this.props.customHandler} />;\n  }\n});";
      return "'use strict';\n\nvar BackBtn = require('ysp-custom-components').BackBtn;\nmodule.exports = React.createClass({\n  displayName: 'exports',\n\n  render: function render() {\n    return React.createElement(BackBtn, { handler: this.props.customHandler });\n  }\n});";
    },
    getData_control26: function (elem) {},
    doAction_uiControl22: function (data, elem) {},
    getTemplate_uiControl22: function () {
      var selfTemplate = "export default class extends React.Component {\n  render = ()=>  {\n    return (\n      <div ref=\"main\">\n           <div id=\"container\"  style={{width:\"100%\",height:\"800px\",overflow:\"hidden\"}}></div>\n           <div className=\"ysp-map-tip-container\">\n              <div>\n                <div>\n                   <span></span>\n                </div>\n                <span id=\"addressDetail\"></span>\n              </div>\n           </div>     \n      </div>\n    )\n  }\n  \n  showMap = ()=> {\n    \n    var map = new AMap.Map(\"container\", {\n        resizeEnable: true,\n        zoom: 15\n    });\n    function startGeocoder(address) {\n       \n        var geocoder = new AMap.Geocoder({\n            city: \"010\", //\u57CE\u5E02\uFF0C\u9ED8\u8BA4\uFF1A\u201C\u5168\u56FD\u201D\n            radius: 1000 //\u8303\u56F4\uFF0C\u9ED8\u8BA4\uFF1A500\n        });\n        //\u5730\u7406\u7F16\u7801,\u8FD4\u56DE\u5730\u7406\u7F16\u7801\u7ED3\u679C\n        geocoder.getLocation(address, function(status, result) {\n            if (status === 'complete' && result.info === 'OK') {\n                top.document.getElementById(\"addressDetail\").innerHTML = address;\n                geocoder_CallBack(result);\n            }\n        });\n\n    }\n    function addMarker(i, d) {\n        var marker = new AMap.Marker({\n            map: map,\n            position: [ d.location.getLng(),  d.location.getLat()]\n        });\n        var infoWindow = new AMap.InfoWindow({\n            content: d.formattedAddress,\n            offset: {x: 0, y: -30}\n        });\n        /*infoWindow.open(map, marker.getPosition());\n        marker.on(\"click\", function(e) {\n            infoWindow.open(map, marker.getPosition());\n        });*/\n    }\n    //\u5730\u7406\u7F16\u7801\u8FD4\u56DE\u7ED3\u679C\u5C55\u793A\n    function geocoder_CallBack(data) {\n        var resultStr = \"\";\n        //\u5730\u7406\u7F16\u7801\u7ED3\u679C\u6570\u7EC4\n        var geocode = data.geocodes;\n        for (var i = 0; i < geocode.length; i++) {\n            addMarker(i, geocode[i]);\n        }\n        map.setFitView();\n    }\n    top.setLocation = function(arg){\n        var address = arg.address;\n        startGeocoder(address);\n    };\n    \n  }\n  \n  componentWillMount = () => {\n    top.locationBegin();\n  }\n  \n  componentDidMount = ()=> {\n    if (top.AMap) {\n      debugger;\n      this.showMap();\n    } else {\n      top.addEventListener(\"map_loaded\", this.showMap, false);\n    }\n  }\n};";
      return "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _class = function (_React$Component) {\n    _inherits(_class, _React$Component);\n\n    function _class() {\n        var _ref;\n\n        var _temp, _this, _ret;\n\n        _classCallCheck(this, _class);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))), _this), _this.render = function () {\n            return React.createElement(\n                \"div\",\n                { ref: \"main\" },\n                React.createElement(\"div\", { id: \"container\", style: { width: \"100%\", height: \"800px\", overflow: \"hidden\" } }),\n                React.createElement(\n                    \"div\",\n                    { className: \"ysp-map-tip-container\" },\n                    React.createElement(\n                        \"div\",\n                        null,\n                        React.createElement(\n                            \"div\",\n                            null,\n                            React.createElement(\"span\", null)\n                        ),\n                        React.createElement(\"span\", { id: \"addressDetail\" })\n                    )\n                )\n            );\n        }, _this.showMap = function () {\n\n            var map = new AMap.Map(\"container\", {\n                resizeEnable: true,\n                zoom: 15\n            });\n            function startGeocoder(address) {\n\n                var geocoder = new AMap.Geocoder({\n                    city: \"010\", //\u57CE\u5E02\uFF0C\u9ED8\u8BA4\uFF1A\u201C\u5168\u56FD\u201D\n                    radius: 1000 //\u8303\u56F4\uFF0C\u9ED8\u8BA4\uFF1A500\n                });\n                //\u5730\u7406\u7F16\u7801,\u8FD4\u56DE\u5730\u7406\u7F16\u7801\u7ED3\u679C\n                geocoder.getLocation(address, function (status, result) {\n                    if (status === 'complete' && result.info === 'OK') {\n                        top.document.getElementById(\"addressDetail\").innerHTML = address;\n                        geocoder_CallBack(result);\n                    }\n                });\n            }\n            function addMarker(i, d) {\n                var marker = new AMap.Marker({\n                    map: map,\n                    position: [d.location.getLng(), d.location.getLat()]\n                });\n                var infoWindow = new AMap.InfoWindow({\n                    content: d.formattedAddress,\n                    offset: { x: 0, y: -30 }\n                });\n                /*infoWindow.open(map, marker.getPosition());\n                marker.on(\"click\", function(e) {\n                    infoWindow.open(map, marker.getPosition());\n                });*/\n            }\n            //\u5730\u7406\u7F16\u7801\u8FD4\u56DE\u7ED3\u679C\u5C55\u793A\n            function geocoder_CallBack(data) {\n                var resultStr = \"\";\n                //\u5730\u7406\u7F16\u7801\u7ED3\u679C\u6570\u7EC4\n                var geocode = data.geocodes;\n                for (var i = 0; i < geocode.length; i++) {\n                    addMarker(i, geocode[i]);\n                }\n                map.setFitView();\n            }\n            top.setLocation = function (arg) {\n                var address = arg.address;\n                startGeocoder(address);\n            };\n        }, _this.componentWillMount = function () {\n            top.locationBegin();\n        }, _this.componentDidMount = function () {\n            if (top.AMap) {\n                debugger;\n                _this.showMap();\n            } else {\n                top.addEventListener(\"map_loaded\", _this.showMap, false);\n            }\n        }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    return _class;\n}(React.Component);\n\nexports.default = _class;\n;";
    }
  });
})(window, ysp);